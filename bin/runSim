#!/usr/bin/env bash
# ==============================================================================
# Script Name:    runSim
# Description:    Helper script to launch simulation
# Author:         David Trevisan
# Copyright:      (c) 2025 DT
# License:        MIT
# ==============================================================================
# Usage:          ./runSim
# Dependencies:   GHDL, GTKWAVE
# ==============================================================================

set -euo pipefail
# set -x

scriptFull=$(readlink -f "$0")
scriptPath=$(dirname "${scriptFull}")
scriptName=$(basename "${scriptFull}")
rootPath=$(dirname "${scriptPath}")
hdlPath="${rootPath}/hdl"
srcPath="${rootPath}/src"

workPath="${hdlPath}/work"
transcriptFile="${workPath}/$(date --iso-8601=seconds).log"

###########################################################

function echoUsage() {
    echo "Usage: ./${scriptName} <target directory> <Optional Overrides (GEN_NAME=X)> "
}

function exec()
{
    echo "$1";
    eval "$1"
    # eval time "$1"
}

###########################################################

if [ "${1:-}" == "" ]; then
    echoUsage
    exit 1
fi

if [ "${1:-}" != "" ]; then
    TARGET="${1}"
    shift
else
    echo "Error: target argument needed (src/prj folder) and optional generic overrides"
    echoUsage
    exit 1
fi

GENERIC_OVERRIDE=""
while [ "${1:-}" != "" ]; do
    GENERIC_OVERRIDE+="-g${1} "
    shift
done
###########################################################
parseVCSources() {
    local file="$1"
    local sources=()

    while IFS= read -r line; do
        # Remove leading '/' if present
        line="${line#/}"
        sources+=("$(basename ${line})")
    done < "$file"

    echo "${sources[@]}"
}

getTbEntityName() {
    local file="$1"
    local lastFile=""
    local entityName=""

    lastFile=$(tail -n 1 "$file")
    lastFile="${lastFile#/}"

    if [[ -f "$lastFile" ]]; then
        entityName=$(grep -oP 'entity \K\w+' "$lastFile" | head -n 1)
    else
        echo "Error: File '$lastFile' does not exist."
        return 1
    fi

    echo "$entityName"
}

###########################################################

ANALYSIS_CMD="ghdl"
COMMON_ARGS="-v --std=93c "

ANALYSIS_ARGS+="-a ${COMMON_ARGS}"

VC_FILE="${TARGET}/sources.vc"

ANALYSIS_ARGS+="$(parseVCSources ${VC_FILE}) "

###########################################################

ELAB_CMD="ghdl"

ELAB_ARGS="--elab-run ${COMMON_ARGS}"

TB_ENTITY_NAME="$(getTbEntityName ${VC_FILE})"
ELAB_ARGS+="${GENERIC_OVERRIDE} "
ELAB_ARGS+="${TB_ENTITY_NAME} "

###########################################################
SIM_CMD="ghdl"
SIM_ARGS="-r ${COMMON_ARGS} "
SIM_ARGS+="${TB_ENTITY_NAME} "
WAVE_FILE="$(basename ${TARGET}).ghw"
SIM_ARGS+="--wave=${WAVE_FILE} "
###########################################################

# Move into target folder, pop back at the end
pushd ${TARGET}

echo "GHDL Analysis: "
    exec "${ANALYSIS_CMD} ${ANALYSIS_ARGS}"

echo "Elaborate TB "
    exec "${ELAB_CMD} ${ELAB_ARGS}"

echo "Run simulation"
    exec "${SIM_CMD} ${SIM_ARGS}"

echo "Open waves"
    exec "gtkwave ${WAVE_FILE}"

popd
