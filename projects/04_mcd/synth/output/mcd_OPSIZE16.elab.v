
// Generated by Cadence Genus(TM) Synthesis Solution 19.14-s108_1
// Generated on: Jul 10 2025 15:30:23 CEST (Jul 10 2025 13:30:23 UTC)

// Verification Directory fv/mcd_OPSIZE16 

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_28(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_31(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl, in_0, in_1, in_2, in_3;
  output [1:0] z;
  wire [1:0] ctl, in_0, in_1, in_2, in_3;
  wire [1:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module case_box(in_0, out_0);
  input [1:0] in_0;
  output [2:0] out_0;
  wire [1:0] in_0;
  wire [2:0] out_0;
  wire n_5;
  assign out_0[0] = in_0[1];
  nor g1 (out_0[2], in_0[0], in_0[1]);
  nor g3 (out_0[1], n_5, in_0[1]);
  not g4 (n_5, in_0[0]);
endmodule

module mux(ctl, in_0, in_1, in_2, z);
  input [2:0] ctl;
  input [1:0] in_0, in_1, in_2;
  output [1:0] z;
  wire [2:0] ctl;
  wire [1:0] in_0, in_1, in_2;
  wire [1:0] z;
  CDN_mux3 g1(.sel0 (ctl[2]), .data0 (in_0[1]), .sel1 (ctl[1]), .data1
       (in_1[1]), .sel2 (ctl[0]), .data2 (in_2[1]), .z (z[1]));
  CDN_mux3 g3(.sel0 (ctl[2]), .data0 (in_0[0]), .sel1 (ctl[1]), .data1
       (in_1[0]), .sel2 (ctl[0]), .data2 (in_2[0]), .z (z[0]));
endmodule

module mcd_ctrl(CLK, rst_n, abort, start, ready, load_R_A, sel_R_A,
     load_R_B, sel_R_B, load_R_res, sel_R_res, div1_abort, div1_start,
     A_majeq_B, z_A, z_B, div1_ready);
  input CLK, rst_n, abort, start, A_majeq_B, z_A, z_B, div1_ready;
  output ready, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  output [1:0] sel_R_B;
  wire CLK, rst_n, abort, start, A_majeq_B, z_A, z_B, div1_ready;
  wire ready, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  wire [1:0] sel_R_B;
  wire [1:0] nextstate;
  wire [1:0] state;
  wire UNCONNECTED, UNCONNECTED0, n_59, n_62, n_63, n_64, n_67, n_68;
  wire n_69, n_70, n_71, n_72, n_73, n_74, n_75, n_76;
  wire n_77, n_78, n_79, n_80, n_81, n_85, n_86, n_87;
  wire n_88, n_89, n_90, n_95, n_97, n_100, n_103, n_104;
  wire n_125, n_126, n_127, n_130, n_133, n_136, n_137;
  assign div1_abort = abort;
  bmux mux_nextstate_83_26(.ctl (start), .in_0 (1'b0), .in_1 (1'b1), .z
       (nextstate[0]));
  bmux mux_nextstate_91_33(.ctl (n_63), .in_0 (1'b1), .in_1 (1'b0), .z
       (n_64));
  bmux_28 mux_nextstate_89_30(.ctl (n_62), .in_0 ({1'b1, n_64}), .in_1
       (2'b00), .z ({nextstate[1], n_67}));
  bmux_28 mux_nextstate_97_24(.ctl (z_B), .in_0 (2'b11), .in_1 (2'b00),
       .z ({n_70, n_68}));
  bmux mux_nextstate_103_31(.ctl (div1_ready), .in_0 (1'b1), .in_1
       (1'b0), .z (n_69));
  bmux_31 mux_nextstate_81_14(.ctl (state), .in_0 ({1'b0,
       nextstate[0]}), .in_1 ({nextstate[1], n_67}), .in_2 ({n_70,
       n_68}), .in_3 ({1'b1, n_69}), .z ({n_72, n_71}));
  bmux_28 mux_nextstate_109_18(.ctl (abort), .in_0 (2'b00), .in_1
       (2'b00), .z ({n_74, n_73}));
  bmux_28 mux_state_72_18(.ctl (n_59), .in_0 (2'b00), .in_1 (2'b00), .z
       ({UNCONNECTED0, UNCONNECTED}));
  bmux mux_div1_start_138_94(.ctl (n_75), .in_0 (1'b0), .in_1 (1'b1),
       .z (div1_start));
  bmux mux_sel_R_res_136_33(.ctl (n_76), .in_0 (1'b1), .in_1 (1'b0), .z
       (sel_R_res));
  bmux mux_load_R_res_132_61(.ctl (n_77), .in_0 (1'b0), .in_1 (1'b1),
       .z (load_R_res));
  case_box ctl_state_128_26(.in_0 (state), .out_0 ({n_78, n_79, n_80}));
  mux mux_sel_R_B_128_26(.ctl ({n_78, n_79, n_80}), .in_0 (2'b00),
       .in_1 (2'b01), .in_2 (2'b10), .z (sel_R_B));
  bmux mux_load_R_B_124_55(.ctl (n_81), .in_0 (1'b0), .in_1 (1'b1), .z
       (load_R_B));
  bmux mux_sel_R_A_121_31(.ctl (n_76), .in_0 (1'b1), .in_1 (1'b0), .z
       (sel_R_A));
  bmux mux_load_R_A_117_55(.ctl (n_81), .in_0 (1'b0), .in_1 (1'b1), .z
       (load_R_A));
  bmux mux_ready_114_29(.ctl (n_76), .in_0 (1'b0), .in_1 (1'b1), .z
       (ready));
  CDN_flop \state_reg[0] (.clk (CLK), .d (n_71), .sena (1'b1), .aclr
       (n_59), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[0]));
  CDN_flop \state_reg[1] (.clk (CLK), .d (n_72), .sena (1'b1), .aclr
       (n_59), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[1]));
  or g1 (n_62, z_A, z_B);
  and g39 (n_87, n_85, n_63);
  or g40 (n_89, n_86, n_87);
  and g41 (n_90, n_88, div1_ready);
  or g42 (n_81, n_89, n_90);
  and g43 (n_86, n_76, start);
  and g44 (n_97, n_95, z_B);
  or g45 (n_77, n_86, n_97);
  and g49 (n_104, n_95, n_100);
  or g50 (n_75, n_103, n_104);
  nand g3 (n_127, n_125, n_126);
  not g4 (n_76, n_127);
  not g60 (n_126, state[1]);
  nand g61 (n_130, state[0], n_126);
  not g62 (n_85, n_130);
  nand g65 (n_133, state[1], state[0]);
  not g66 (n_88, n_133);
  nand g69 (n_136, state[1], n_125);
  not g70 (n_95, n_136);
  not g74 (n_59, rst_n);
  not g75 (n_63, A_majeq_B);
  not g77 (n_100, z_B);
  not g78 (n_125, state[0]);
  and g79 (n_103, n_137, n_85, n_100, A_majeq_B);
  not g80 (n_137, z_A);
endmodule

module bmux_59(ctl, in_0, in_1, in_2, z);
  input [1:0] ctl, in_0, in_1, in_2;
  output [1:0] z;
  wire [1:0] ctl, in_0, in_1, in_2;
  wire [1:0] z;
  CDN_bmux3 g1(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .z (z[1]));
  CDN_bmux3 g2(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .z (z[0]));
endmodule

module divider_ctrl(CLK, rst_n, abort, start, ready, load_R_A, sel_R_A,
     load_R_B, load_R_res, sel_R_res, load_R_cnt, sel_R_cnt, A_majeq_B,
     z_cnt);
  input CLK, rst_n, abort, start, A_majeq_B, z_cnt;
  output ready, load_R_A, load_R_B, load_R_res, load_R_cnt, sel_R_cnt;
  output [1:0] sel_R_A, sel_R_res;
  wire CLK, rst_n, abort, start, A_majeq_B, z_cnt;
  wire ready, load_R_A, load_R_B, load_R_res, load_R_cnt, sel_R_cnt;
  wire [1:0] sel_R_A, sel_R_res;
  wire [1:0] nextstate;
  wire [1:0] state;
  wire UNCONNECTED1, UNCONNECTED2, n_48, n_52, n_53, n_54, n_55, n_56;
  wire n_57, n_59, n_60, n_61, n_62, n_63, n_64, n_67;
  wire n_68, n_88, n_89, n_90, n_93;
  bmux mux_nextstate_76_26(.ctl (start), .in_0 (1'b0), .in_1 (1'b1), .z
       (nextstate[0]));
  bmux mux_nextstate_84_26(.ctl (z_cnt), .in_0 (1'b1), .in_1 (1'b0), .z
       (nextstate[1]));
  bmux_59 mux_nextstate_74_14(.ctl (state), .in_0 ({1'b0,
       nextstate[0]}), .in_1 (2'b10), .in_2 ({nextstate[1], 1'b0}), .z
       ({n_53, n_52}));
  bmux_28 mux_nextstate_90_18(.ctl (abort), .in_0 (2'b00), .in_1
       (2'b00), .z ({n_55, n_54}));
  bmux_28 mux_state_65_18(.ctl (n_48), .in_0 (2'b00), .in_1 (2'b00), .z
       ({UNCONNECTED2, UNCONNECTED1}));
  bmux mux_sel_R_cnt_111_33(.ctl (n_56), .in_0 (1'b1), .in_1 (1'b0), .z
       (sel_R_cnt));
  bmux mux_load_R_cnt_109_43(.ctl (n_57), .in_0 (1'b0), .in_1 (1'b1),
       .z (load_R_cnt));
  bmux_28 mux_sel_R_res_106_29(.ctl (A_majeq_B), .in_0 (2'b10), .in_1
       (2'b01), .z ({n_60, n_59}));
  bmux_28 mux_sel_R_res_105_34(.ctl (n_56), .in_0 ({n_60, n_59}), .in_1
       (2'b00), .z (sel_R_res));
  bmux mux_load_R_res_103_43(.ctl (n_61), .in_0 (1'b1), .in_1 (1'b0),
       .z (load_R_res));
  bmux mux_load_R_B_101_42(.ctl (n_62), .in_0 (1'b0), .in_1 (1'b1), .z
       (load_R_B));
  bmux_28 mux_sel_R_A_98_29(.ctl (A_majeq_B), .in_0 (2'b10), .in_1
       (2'b01), .z ({n_64, n_63}));
  bmux_28 mux_sel_R_A_97_32(.ctl (n_56), .in_0 ({n_64, n_63}), .in_1
       (2'b00), .z (sel_R_A));
  bmux mux_load_R_A_95_41(.ctl (n_61), .in_0 (1'b1), .in_1 (1'b0), .z
       (load_R_A));
  bmux mux_ready_113_29(.ctl (n_56), .in_0 (1'b0), .in_1 (1'b1), .z
       (ready));
  CDN_flop \state_reg[0] (.clk (CLK), .d (n_52), .sena (1'b1), .aclr
       (n_48), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[0]));
  CDN_flop \state_reg[1] (.clk (CLK), .d (n_53), .sena (1'b1), .aclr
       (n_48), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[1]));
  and g16 (n_62, n_56, start);
  and g17 (n_61, n_56, n_67);
  or g18 (n_57, n_56, n_68);
  not g2 (n_89, state[1]);
  nand g3 (n_90, n_88, n_89);
  not g4 (n_56, n_90);
  nand g28 (n_93, state[1], n_88);
  not g29 (n_68, n_93);
  not g30 (n_48, rst_n);
  not g31 (n_88, state[0]);
  not g32 (n_67, start);
endmodule

module sub_unsigned(A, B, Z);
  input [4:0] A;
  input B;
  output [4:0] Z;
  wire [4:0] A;
  wire B;
  wire [4:0] Z;
  wire n_22, n_25, n_28, n_30, n_31, n_32, n_38, n_40;
  wire n_42, n_45, n_52, n_55;
  not g6 (n_22, B);
  xor g8 (n_55, A[0], n_22);
  nand g11 (n_28, n_25, B);
  nand g22 (n_38, n_30, n_31);
  nor g25 (n_42, A[2], A[3]);
  nand g29 (n_52, n_32, n_40);
  nand g31 (n_45, n_42, n_40);
  xnor g36 (Z[1], n_28, A[1]);
  xnor g38 (Z[2], n_38, A[2]);
  xnor g41 (Z[3], n_52, A[3]);
  xnor g43 (Z[4], n_45, A[4]);
  not g46 (n_32, A[2]);
  not g48 (n_30, A[1]);
  not g49 (n_25, A[0]);
  not g50 (Z[0], n_55);
  not g51 (n_31, n_28);
  not g52 (n_40, n_38);
endmodule

module sub_unsigned_79(A, B, Z);
  input [16:0] A;
  input [15:0] B;
  output [16:0] Z;
  wire [16:0] A;
  wire [15:0] B;
  wire [16:0] Z;
  wire n_55, n_56, n_57, n_58, n_59, n_60, n_61, n_62;
  wire n_63, n_64, n_65, n_66, n_67, n_68, n_69, n_70;
  wire n_73, n_75, n_76, n_77, n_78, n_79, n_80, n_81;
  wire n_82, n_83, n_84, n_85, n_86, n_87, n_88, n_89;
  wire n_90, n_91, n_92, n_93, n_94, n_95, n_96, n_97;
  wire n_98, n_99, n_100, n_101, n_102, n_103, n_104, n_105;
  wire n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113;
  wire n_114, n_115, n_116, n_117, n_118, n_119, n_120, n_121;
  wire n_122, n_123, n_124, n_125, n_126, n_127, n_128, n_129;
  wire n_130, n_131, n_132, n_133, n_134, n_135, n_136, n_137;
  wire n_138, n_139, n_140, n_141, n_142, n_143, n_144, n_145;
  wire n_146, n_147, n_148, n_149, n_150, n_151, n_152, n_153;
  wire n_154, n_155, n_156, n_157, n_158, n_159, n_160, n_161;
  wire n_162, n_163, n_164, n_165, n_166, n_167, n_168, n_169;
  wire n_170, n_171, n_172, n_173, n_174, n_175, n_176, n_177;
  wire n_178, n_179, n_180, n_181, n_182, n_183, n_184, n_185;
  wire n_186, n_187, n_188, n_189, n_190, n_191, n_192, n_193;
  wire n_194, n_195, n_196, n_197, n_198, n_199, n_200, n_201;
  wire n_202, n_203, n_204, n_205, n_206, n_208, n_212, n_213;
  wire n_214, n_215, n_216, n_217, n_218, n_219, n_220, n_221;
  wire n_222, n_223, n_224, n_225, n_226, n_227, n_228, n_229;
  wire n_230, n_231, n_232, n_233, n_234, n_235, n_236, n_237;
  wire n_238, n_239, n_240, n_241, n_242, n_243, n_244, n_245;
  wire n_247;
  not g3 (n_55, B[15]);
  not g4 (n_56, B[14]);
  not g5 (n_57, B[13]);
  not g6 (n_58, B[12]);
  not g7 (n_59, B[11]);
  not g8 (n_60, B[10]);
  not g9 (n_61, B[9]);
  not g10 (n_62, B[8]);
  not g11 (n_63, B[7]);
  not g12 (n_64, B[6]);
  not g13 (n_65, B[5]);
  not g14 (n_66, B[4]);
  not g15 (n_67, B[3]);
  not g16 (n_68, B[2]);
  not g17 (n_69, B[1]);
  not g18 (n_70, B[0]);
  xor g20 (n_247, A[0], n_70);
  nand g23 (n_76, n_73, B[0]);
  nor g24 (n_75, A[1], n_69);
  nand g25 (n_78, A[1], n_69);
  nor g26 (n_85, A[2], n_68);
  nand g27 (n_80, A[2], n_68);
  nor g28 (n_81, A[3], n_67);
  nand g29 (n_82, A[3], n_67);
  nor g30 (n_91, A[4], n_66);
  nand g31 (n_86, A[4], n_66);
  nor g32 (n_87, A[5], n_65);
  nand g33 (n_88, A[5], n_65);
  nor g34 (n_97, A[6], n_64);
  nand g35 (n_92, A[6], n_64);
  nor g36 (n_93, A[7], n_63);
  nand g37 (n_94, A[7], n_63);
  nor g38 (n_103, A[8], n_62);
  nand g39 (n_98, A[8], n_62);
  nor g40 (n_99, A[9], n_61);
  nand g41 (n_100, A[9], n_61);
  nor g42 (n_109, A[10], n_60);
  nand g43 (n_104, A[10], n_60);
  nor g44 (n_105, A[11], n_59);
  nand g45 (n_106, A[11], n_59);
  nor g46 (n_115, A[12], n_58);
  nand g47 (n_110, A[12], n_58);
  nor g48 (n_111, A[13], n_57);
  nand g49 (n_112, A[13], n_57);
  nor g50 (n_121, A[14], n_56);
  nand g51 (n_116, A[14], n_56);
  nor g52 (n_117, A[15], n_55);
  nand g53 (n_118, A[15], n_55);
  not g56 (n_77, n_75);
  nand g57 (n_79, n_76, n_77);
  nand g58 (n_122, n_78, n_79);
  nor g59 (n_83, n_80, n_81);
  not g60 (n_84, n_82);
  nor g61 (n_126, n_83, n_84);
  nor g62 (n_125, n_85, n_81);
  nor g63 (n_89, n_86, n_87);
  not g64 (n_90, n_88);
  nor g65 (n_128, n_89, n_90);
  nor g66 (n_131, n_91, n_87);
  nor g67 (n_95, n_92, n_93);
  not g68 (n_96, n_94);
  nor g69 (n_135, n_95, n_96);
  nor g70 (n_133, n_97, n_93);
  nor g71 (n_101, n_98, n_99);
  not g72 (n_102, n_100);
  nor g73 (n_138, n_101, n_102);
  nor g74 (n_141, n_103, n_99);
  nor g75 (n_107, n_104, n_105);
  not g76 (n_108, n_106);
  nor g77 (n_145, n_107, n_108);
  nor g78 (n_143, n_109, n_105);
  nor g79 (n_113, n_110, n_111);
  not g80 (n_114, n_112);
  nor g81 (n_148, n_113, n_114);
  nor g82 (n_151, n_115, n_111);
  nor g83 (n_119, n_116, n_117);
  not g84 (n_120, n_118);
  nor g85 (n_155, n_119, n_120);
  nor g86 (n_153, n_121, n_117);
  not g87 (n_123, n_85);
  nand g88 (n_124, n_122, n_123);
  nand g89 (n_215, n_80, n_124);
  nand g90 (n_127, n_125, n_122);
  nand g91 (n_158, n_126, n_127);
  nor g92 (n_129, n_97, n_128);
  not g93 (n_130, n_92);
  nor g94 (n_164, n_129, n_130);
  not g95 (n_132, n_97);
  nand g96 (n_162, n_131, n_132);
  not g97 (n_134, n_133);
  nor g98 (n_136, n_128, n_134);
  not g99 (n_137, n_135);
  nor g100 (n_168, n_136, n_137);
  nand g101 (n_166, n_131, n_133);
  nor g102 (n_139, n_109, n_138);
  not g103 (n_140, n_104);
  nor g104 (n_191, n_139, n_140);
  not g105 (n_142, n_109);
  nand g106 (n_189, n_141, n_142);
  not g107 (n_144, n_143);
  nor g108 (n_146, n_138, n_144);
  not g109 (n_147, n_145);
  nor g110 (n_170, n_146, n_147);
  nand g111 (n_173, n_141, n_143);
  nor g112 (n_149, n_121, n_148);
  not g113 (n_150, n_116);
  nor g114 (n_178, n_149, n_150);
  not g115 (n_152, n_121);
  nand g116 (n_177, n_151, n_152);
  not g117 (n_154, n_153);
  nor g118 (n_156, n_148, n_154);
  not g119 (n_157, n_155);
  nor g120 (n_182, n_156, n_157);
  nand g121 (n_181, n_151, n_153);
  not g122 (n_159, n_91);
  nand g123 (n_160, n_158, n_159);
  nand g124 (n_219, n_86, n_160);
  nand g125 (n_161, n_131, n_158);
  nand g126 (n_221, n_128, n_161);
  not g127 (n_163, n_162);
  nand g128 (n_165, n_158, n_163);
  nand g129 (n_224, n_164, n_165);
  not g130 (n_167, n_166);
  nand g131 (n_169, n_158, n_167);
  nand g132 (n_185, n_168, n_169);
  nor g133 (n_171, n_115, n_170);
  not g134 (n_172, n_110);
  nor g135 (n_196, n_171, n_172);
  nor g136 (n_195, n_115, n_173);
  not g137 (n_174, n_151);
  nor g138 (n_175, n_170, n_174);
  not g139 (n_176, n_148);
  nor g140 (n_199, n_175, n_176);
  nor g141 (n_198, n_173, n_174);
  nor g142 (n_179, n_177, n_170);
  not g143 (n_180, n_178);
  nor g144 (n_202, n_179, n_180);
  nor g145 (n_201, n_173, n_177);
  nor g146 (n_183, n_181, n_170);
  not g147 (n_184, n_182);
  nor g148 (n_205, n_183, n_184);
  nor g149 (n_204, n_173, n_181);
  not g150 (n_186, n_103);
  nand g151 (n_187, n_185, n_186);
  nand g152 (n_228, n_98, n_187);
  nand g153 (n_188, n_141, n_185);
  nand g154 (n_230, n_138, n_188);
  not g155 (n_190, n_189);
  nand g156 (n_192, n_185, n_190);
  nand g157 (n_233, n_191, n_192);
  not g158 (n_193, n_173);
  nand g159 (n_194, n_185, n_193);
  nand g160 (n_236, n_170, n_194);
  nand g161 (n_197, n_195, n_185);
  nand g162 (n_239, n_196, n_197);
  nand g163 (n_200, n_198, n_185);
  nand g164 (n_241, n_199, n_200);
  nand g165 (n_203, n_201, n_185);
  nand g166 (n_244, n_202, n_203);
  nand g167 (n_206, n_204, n_185);
  nand g168 (n_208, n_205, n_206);
  nand g172 (n_212, n_77, n_78);
  xnor g173 (Z[1], n_76, n_212);
  nand g174 (n_213, n_123, n_80);
  xnor g175 (Z[2], n_122, n_213);
  not g176 (n_214, n_81);
  nand g177 (n_216, n_214, n_82);
  xnor g178 (Z[3], n_215, n_216);
  nand g179 (n_217, n_159, n_86);
  xnor g180 (Z[4], n_158, n_217);
  not g181 (n_218, n_87);
  nand g182 (n_220, n_218, n_88);
  xnor g183 (Z[5], n_219, n_220);
  nand g184 (n_222, n_132, n_92);
  xnor g185 (Z[6], n_221, n_222);
  not g186 (n_223, n_93);
  nand g187 (n_225, n_223, n_94);
  xnor g188 (Z[7], n_224, n_225);
  nand g189 (n_226, n_186, n_98);
  xnor g190 (Z[8], n_185, n_226);
  not g191 (n_227, n_99);
  nand g192 (n_229, n_227, n_100);
  xnor g193 (Z[9], n_228, n_229);
  nand g194 (n_231, n_142, n_104);
  xnor g195 (Z[10], n_230, n_231);
  not g196 (n_232, n_105);
  nand g197 (n_234, n_232, n_106);
  xnor g198 (Z[11], n_233, n_234);
  not g199 (n_235, n_115);
  nand g200 (n_237, n_235, n_110);
  xnor g201 (Z[12], n_236, n_237);
  not g202 (n_238, n_111);
  nand g203 (n_240, n_238, n_112);
  xnor g204 (Z[13], n_239, n_240);
  nand g205 (n_242, n_152, n_116);
  xnor g206 (Z[14], n_241, n_242);
  not g207 (n_243, n_117);
  nand g208 (n_245, n_243, n_118);
  xnor g209 (Z[15], n_244, n_245);
  xnor g211 (Z[16], n_208, A[16]);
  not g214 (n_73, A[0]);
  not g215 (Z[0], n_247);
endmodule

module mux_88(ctl, in_0, in_1, in_2, z);
  input [2:0] ctl;
  input in_0, in_1, in_2;
  output z;
  wire [2:0] ctl;
  wire in_0, in_1, in_2;
  wire z;
  CDN_mux3 g1(.sel0 (ctl[2]), .data0 (in_0), .sel1 (ctl[1]), .data1
       (in_1), .sel2 (ctl[0]), .data2 (in_2), .z (z));
endmodule

module bmux_89(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [14:0] in_0, in_1, in_2, in_3;
  output [14:0] z;
  wire [1:0] ctl;
  wire [14:0] in_0, in_1, in_2, in_3;
  wire [14:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .z
       (z[14]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .z
       (z[13]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .z
       (z[12]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .z
       (z[11]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .z
       (z[10]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .z (z[9]));
  CDN_bmux4 g7(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .z (z[8]));
  CDN_bmux4 g8(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .z (z[7]));
  CDN_bmux4 g9(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .z (z[6]));
  CDN_bmux4 g10(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g11(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g12(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g13(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g14(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g15(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module bmux_90(ctl, in_0, in_1, z);
  input ctl;
  input [15:0] in_0, in_1;
  output [15:0] z;
  wire ctl;
  wire [15:0] in_0, in_1;
  wire [15:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_92(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [31:0] in_0, in_1, in_2, in_3;
  output [31:0] z;
  wire [1:0] ctl;
  wire [31:0] in_0, in_1, in_2, in_3;
  wire [31:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[31]), .data1 (in_1[31]),
       .sel1 (ctl[1]), .data2 (in_2[31]), .data3 (in_3[31]), .z
       (z[31]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[30]), .data1 (in_1[30]),
       .sel1 (ctl[1]), .data2 (in_2[30]), .data3 (in_3[30]), .z
       (z[30]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[29]), .data1 (in_1[29]),
       .sel1 (ctl[1]), .data2 (in_2[29]), .data3 (in_3[29]), .z
       (z[29]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[28]), .data1 (in_1[28]),
       .sel1 (ctl[1]), .data2 (in_2[28]), .data3 (in_3[28]), .z
       (z[28]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[27]), .data1 (in_1[27]),
       .sel1 (ctl[1]), .data2 (in_2[27]), .data3 (in_3[27]), .z
       (z[27]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[26]), .data1 (in_1[26]),
       .sel1 (ctl[1]), .data2 (in_2[26]), .data3 (in_3[26]), .z
       (z[26]));
  CDN_bmux4 g7(.sel0 (ctl[0]), .data0 (in_0[25]), .data1 (in_1[25]),
       .sel1 (ctl[1]), .data2 (in_2[25]), .data3 (in_3[25]), .z
       (z[25]));
  CDN_bmux4 g8(.sel0 (ctl[0]), .data0 (in_0[24]), .data1 (in_1[24]),
       .sel1 (ctl[1]), .data2 (in_2[24]), .data3 (in_3[24]), .z
       (z[24]));
  CDN_bmux4 g9(.sel0 (ctl[0]), .data0 (in_0[23]), .data1 (in_1[23]),
       .sel1 (ctl[1]), .data2 (in_2[23]), .data3 (in_3[23]), .z
       (z[23]));
  CDN_bmux4 g10(.sel0 (ctl[0]), .data0 (in_0[22]), .data1 (in_1[22]),
       .sel1 (ctl[1]), .data2 (in_2[22]), .data3 (in_3[22]), .z
       (z[22]));
  CDN_bmux4 g11(.sel0 (ctl[0]), .data0 (in_0[21]), .data1 (in_1[21]),
       .sel1 (ctl[1]), .data2 (in_2[21]), .data3 (in_3[21]), .z
       (z[21]));
  CDN_bmux4 g12(.sel0 (ctl[0]), .data0 (in_0[20]), .data1 (in_1[20]),
       .sel1 (ctl[1]), .data2 (in_2[20]), .data3 (in_3[20]), .z
       (z[20]));
  CDN_bmux4 g13(.sel0 (ctl[0]), .data0 (in_0[19]), .data1 (in_1[19]),
       .sel1 (ctl[1]), .data2 (in_2[19]), .data3 (in_3[19]), .z
       (z[19]));
  CDN_bmux4 g14(.sel0 (ctl[0]), .data0 (in_0[18]), .data1 (in_1[18]),
       .sel1 (ctl[1]), .data2 (in_2[18]), .data3 (in_3[18]), .z
       (z[18]));
  CDN_bmux4 g15(.sel0 (ctl[0]), .data0 (in_0[17]), .data1 (in_1[17]),
       .sel1 (ctl[1]), .data2 (in_2[17]), .data3 (in_3[17]), .z
       (z[17]));
  CDN_bmux4 g16(.sel0 (ctl[0]), .data0 (in_0[16]), .data1 (in_1[16]),
       .sel1 (ctl[1]), .data2 (in_2[16]), .data3 (in_3[16]), .z
       (z[16]));
  CDN_bmux4 g17(.sel0 (ctl[0]), .data0 (in_0[15]), .data1 (in_1[15]),
       .sel1 (ctl[1]), .data2 (in_2[15]), .data3 (in_3[15]), .z
       (z[15]));
  CDN_bmux4 g18(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .z
       (z[14]));
  CDN_bmux4 g19(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .z
       (z[13]));
  CDN_bmux4 g20(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .z
       (z[12]));
  CDN_bmux4 g21(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .z
       (z[11]));
  CDN_bmux4 g22(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .z
       (z[10]));
  CDN_bmux4 g23(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .z (z[9]));
  CDN_bmux4 g24(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .z (z[8]));
  CDN_bmux4 g25(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .z (z[7]));
  CDN_bmux4 g26(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .z (z[6]));
  CDN_bmux4 g27(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g28(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g29(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g30(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g31(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g32(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module bmux_93(ctl, in_0, in_1, z);
  input ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_94(ctl, in_0, in_1, z);
  input ctl;
  input [4:0] in_0, in_1;
  output [4:0] z;
  wire ctl;
  wire [4:0] in_0, in_1;
  wire [4:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module divider_dp_OPSIZE16(CLK, rst_n, operand1, operand2, div,
     remainder, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
     load_R_cnt, sel_R_cnt, A_majeq_B, z_cnt);
  input CLK, rst_n, load_R_A, load_R_B, load_R_res, load_R_cnt,
       sel_R_cnt;
  input [15:0] operand1, operand2;
  input [1:0] sel_R_A, sel_R_res;
  output [15:0] div, remainder;
  output A_majeq_B, z_cnt;
  wire CLK, rst_n, load_R_A, load_R_B, load_R_res, load_R_cnt,
       sel_R_cnt;
  wire [15:0] operand1, operand2;
  wire [1:0] sel_R_A, sel_R_res;
  wire [15:0] div, remainder;
  wire A_majeq_B, z_cnt;
  wire [4:0] R_cnt;
  wire [4:0] adder2_out;
  wire [31:0] R_A;
  wire [15:0] R_B;
  wire [16:0] adder1_out;
  wire [15:0] in_R_res;
  wire [31:0] in_R_A;
  wire [4:0] in_R_cnt;
  wire UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6,
       UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, UNCONNECTED10;
  wire UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14,
       UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18;
  wire UNCONNECTED19, UNCONNECTED20, UNCONNECTED21, UNCONNECTED22,
       UNCONNECTED23, UNCONNECTED24, UNCONNECTED25, UNCONNECTED26;
  wire UNCONNECTED27, UNCONNECTED28, UNCONNECTED29, UNCONNECTED30,
       UNCONNECTED31, UNCONNECTED32, UNCONNECTED33, UNCONNECTED34;
  wire UNCONNECTED35, UNCONNECTED36, UNCONNECTED37, UNCONNECTED38,
       UNCONNECTED39, UNCONNECTED40, UNCONNECTED41, UNCONNECTED42;
  wire UNCONNECTED43, UNCONNECTED44, UNCONNECTED45, UNCONNECTED46,
       UNCONNECTED47, UNCONNECTED48, UNCONNECTED49, UNCONNECTED50;
  wire UNCONNECTED51, UNCONNECTED52, UNCONNECTED53, UNCONNECTED54,
       UNCONNECTED55, UNCONNECTED56, UNCONNECTED57, UNCONNECTED58;
  wire UNCONNECTED59, UNCONNECTED60, UNCONNECTED61, UNCONNECTED62,
       UNCONNECTED63, UNCONNECTED64, UNCONNECTED65, UNCONNECTED66;
  wire UNCONNECTED67, UNCONNECTED68, UNCONNECTED69, UNCONNECTED70,
       UNCONNECTED71, n_5, n_124, n_128;
  wire n_129, n_168, n_169, n_244, n_245, n_246;
  sub_unsigned sub_123_52(.A (R_cnt), .B (1'b1), .Z (adder2_out));
  sub_unsigned_79 sub_121_57(.A ({1'b0, remainder[14:0], R_A[15]}), .B
       (R_B), .Z (adder1_out));
  mux_88 mux_in_R_res_112_10(.ctl ({n_128, n_129, sel_R_res[1]}), .in_0
       (1'b0), .in_1 (1'b1), .in_2 (1'b0), .z (in_R_res[0]));
  bmux_89 mux_in_R_res_112_7(.ctl (sel_R_res), .in_0
       (15'b000000000000000), .in_1 (div[14:0]), .in_2 (div[14:0]),
       .in_3 (div[14:0]), .z (in_R_res[15:1]));
  bmux_90 mux_R_res_83_18(.ctl (n_124), .in_0 (16'b0000000000000000),
       .in_1 (16'b0000000000000000), .z ({UNCONNECTED18, UNCONNECTED17,
       UNCONNECTED16, UNCONNECTED15, UNCONNECTED14, UNCONNECTED13,
       UNCONNECTED12, UNCONNECTED11, UNCONNECTED10, UNCONNECTED9,
       UNCONNECTED8, UNCONNECTED7, UNCONNECTED6, UNCONNECTED5,
       UNCONNECTED4, UNCONNECTED3}));
  bmux_90 mux_R_B_83_18(.ctl (n_124), .in_0 (16'b0000000000000000),
       .in_1 (16'b0000000000000000), .z ({UNCONNECTED34, UNCONNECTED33,
       UNCONNECTED32, UNCONNECTED31, UNCONNECTED30, UNCONNECTED29,
       UNCONNECTED28, UNCONNECTED27, UNCONNECTED26, UNCONNECTED25,
       UNCONNECTED24, UNCONNECTED23, UNCONNECTED22, UNCONNECTED21,
       UNCONNECTED20, UNCONNECTED19}));
  bmux_92 mux_in_R_A_104_10(.ctl (sel_R_A), .in_0
       ({16'b0000000000000000, operand1}), .in_1 ({adder1_out[15:0],
       R_A[14:0], 1'b0}), .in_2 ({remainder[14:0], R_A[15:0], 1'b0}),
       .in_3 ({remainder[14:0], R_A[15:0], 1'b0}), .z (in_R_A));
  bmux_93 mux_R_A_83_18(.ctl (n_124), .in_0
       (32'b00000000000000000000000000000000), .in_1
       (32'b00000000000000000000000000000000), .z ({UNCONNECTED66,
       UNCONNECTED65, UNCONNECTED64, UNCONNECTED63, UNCONNECTED62,
       UNCONNECTED61, UNCONNECTED60, UNCONNECTED59, UNCONNECTED58,
       UNCONNECTED57, UNCONNECTED56, UNCONNECTED55, UNCONNECTED54,
       UNCONNECTED53, UNCONNECTED52, UNCONNECTED51, UNCONNECTED50,
       UNCONNECTED49, UNCONNECTED48, UNCONNECTED47, UNCONNECTED46,
       UNCONNECTED45, UNCONNECTED44, UNCONNECTED43, UNCONNECTED42,
       UNCONNECTED41, UNCONNECTED40, UNCONNECTED39, UNCONNECTED38,
       UNCONNECTED37, UNCONNECTED36, UNCONNECTED35}));
  bmux_94 mux_in_R_cnt_124_10(.ctl (sel_R_cnt), .in_0 (5'b01110), .in_1
       (adder2_out), .z (in_R_cnt));
  bmux_94 mux_R_cnt_83_18(.ctl (n_124), .in_0 (5'b00000), .in_1
       (5'b00000), .z ({UNCONNECTED71, UNCONNECTED70, UNCONNECTED69,
       UNCONNECTED68, UNCONNECTED67}));
  bmux mux_z_cnt_130_29(.ctl (n_168), .in_0 (1'b0), .in_1 (1'b1), .z
       (z_cnt));
  bmux mux_A_majeq_B_132_55(.ctl (n_169), .in_0 (1'b0), .in_1 (1'b1),
       .z (A_majeq_B));
  CDN_flop \R_cnt_reg[0] (.clk (CLK), .d (in_R_cnt[0]), .sena
       (load_R_cnt), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[0]));
  CDN_flop \R_cnt_reg[1] (.clk (CLK), .d (in_R_cnt[1]), .sena
       (load_R_cnt), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[1]));
  CDN_flop \R_cnt_reg[2] (.clk (CLK), .d (in_R_cnt[2]), .sena
       (load_R_cnt), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[2]));
  CDN_flop \R_cnt_reg[3] (.clk (CLK), .d (in_R_cnt[3]), .sena
       (load_R_cnt), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[3]));
  CDN_flop \R_cnt_reg[4] (.clk (CLK), .d (in_R_cnt[4]), .sena
       (load_R_cnt), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[4]));
  CDN_flop \R_A_reg[0] (.clk (CLK), .d (in_R_A[0]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[0]));
  CDN_flop \R_A_reg[1] (.clk (CLK), .d (in_R_A[1]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[1]));
  CDN_flop \R_A_reg[2] (.clk (CLK), .d (in_R_A[2]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[2]));
  CDN_flop \R_A_reg[3] (.clk (CLK), .d (in_R_A[3]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[3]));
  CDN_flop \R_A_reg[4] (.clk (CLK), .d (in_R_A[4]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[4]));
  CDN_flop \R_A_reg[5] (.clk (CLK), .d (in_R_A[5]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[5]));
  CDN_flop \R_A_reg[6] (.clk (CLK), .d (in_R_A[6]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[6]));
  CDN_flop \R_A_reg[7] (.clk (CLK), .d (in_R_A[7]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[7]));
  CDN_flop \R_A_reg[8] (.clk (CLK), .d (in_R_A[8]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[8]));
  CDN_flop \R_A_reg[9] (.clk (CLK), .d (in_R_A[9]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[9]));
  CDN_flop \R_A_reg[10] (.clk (CLK), .d (in_R_A[10]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[10]));
  CDN_flop \R_A_reg[11] (.clk (CLK), .d (in_R_A[11]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[11]));
  CDN_flop \R_A_reg[12] (.clk (CLK), .d (in_R_A[12]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[12]));
  CDN_flop \R_A_reg[13] (.clk (CLK), .d (in_R_A[13]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[13]));
  CDN_flop \R_A_reg[14] (.clk (CLK), .d (in_R_A[14]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[14]));
  CDN_flop \R_A_reg[15] (.clk (CLK), .d (in_R_A[15]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[15]));
  CDN_flop \R_A_reg[16] (.clk (CLK), .d (in_R_A[16]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[0]));
  CDN_flop \R_A_reg[17] (.clk (CLK), .d (in_R_A[17]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[1]));
  CDN_flop \R_A_reg[18] (.clk (CLK), .d (in_R_A[18]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[2]));
  CDN_flop \R_A_reg[19] (.clk (CLK), .d (in_R_A[19]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[3]));
  CDN_flop \R_A_reg[20] (.clk (CLK), .d (in_R_A[20]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[4]));
  CDN_flop \R_A_reg[21] (.clk (CLK), .d (in_R_A[21]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[5]));
  CDN_flop \R_A_reg[22] (.clk (CLK), .d (in_R_A[22]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[6]));
  CDN_flop \R_A_reg[23] (.clk (CLK), .d (in_R_A[23]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[7]));
  CDN_flop \R_A_reg[24] (.clk (CLK), .d (in_R_A[24]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[8]));
  CDN_flop \R_A_reg[25] (.clk (CLK), .d (in_R_A[25]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[9]));
  CDN_flop \R_A_reg[26] (.clk (CLK), .d (in_R_A[26]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[10]));
  CDN_flop \R_A_reg[27] (.clk (CLK), .d (in_R_A[27]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[11]));
  CDN_flop \R_A_reg[28] (.clk (CLK), .d (in_R_A[28]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[12]));
  CDN_flop \R_A_reg[29] (.clk (CLK), .d (in_R_A[29]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[13]));
  CDN_flop \R_A_reg[30] (.clk (CLK), .d (in_R_A[30]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[14]));
  CDN_flop \R_A_reg[31] (.clk (CLK), .d (in_R_A[31]), .sena (load_R_A),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[15]));
  CDN_flop \R_B_reg[0] (.clk (CLK), .d (operand2[0]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[0]));
  CDN_flop \R_B_reg[1] (.clk (CLK), .d (operand2[1]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[1]));
  CDN_flop \R_B_reg[2] (.clk (CLK), .d (operand2[2]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[2]));
  CDN_flop \R_B_reg[3] (.clk (CLK), .d (operand2[3]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[3]));
  CDN_flop \R_B_reg[4] (.clk (CLK), .d (operand2[4]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[4]));
  CDN_flop \R_B_reg[5] (.clk (CLK), .d (operand2[5]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[5]));
  CDN_flop \R_B_reg[6] (.clk (CLK), .d (operand2[6]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[6]));
  CDN_flop \R_B_reg[7] (.clk (CLK), .d (operand2[7]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[7]));
  CDN_flop \R_B_reg[8] (.clk (CLK), .d (operand2[8]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[8]));
  CDN_flop \R_B_reg[9] (.clk (CLK), .d (operand2[9]), .sena (load_R_B),
       .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[9]));
  CDN_flop \R_B_reg[10] (.clk (CLK), .d (operand2[10]), .sena
       (load_R_B), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[10]));
  CDN_flop \R_B_reg[11] (.clk (CLK), .d (operand2[11]), .sena
       (load_R_B), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[11]));
  CDN_flop \R_B_reg[12] (.clk (CLK), .d (operand2[12]), .sena
       (load_R_B), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[12]));
  CDN_flop \R_B_reg[13] (.clk (CLK), .d (operand2[13]), .sena
       (load_R_B), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[13]));
  CDN_flop \R_B_reg[14] (.clk (CLK), .d (operand2[14]), .sena
       (load_R_B), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[14]));
  CDN_flop \R_B_reg[15] (.clk (CLK), .d (operand2[15]), .sena
       (load_R_B), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[15]));
  CDN_flop \R_res_reg[0] (.clk (CLK), .d (in_R_res[0]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[0]));
  CDN_flop \R_res_reg[1] (.clk (CLK), .d (in_R_res[1]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[1]));
  CDN_flop \R_res_reg[2] (.clk (CLK), .d (in_R_res[2]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[2]));
  CDN_flop \R_res_reg[3] (.clk (CLK), .d (in_R_res[3]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[3]));
  CDN_flop \R_res_reg[4] (.clk (CLK), .d (in_R_res[4]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[4]));
  CDN_flop \R_res_reg[5] (.clk (CLK), .d (in_R_res[5]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[5]));
  CDN_flop \R_res_reg[6] (.clk (CLK), .d (in_R_res[6]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[6]));
  CDN_flop \R_res_reg[7] (.clk (CLK), .d (in_R_res[7]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[7]));
  CDN_flop \R_res_reg[8] (.clk (CLK), .d (in_R_res[8]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[8]));
  CDN_flop \R_res_reg[9] (.clk (CLK), .d (in_R_res[9]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[9]));
  CDN_flop \R_res_reg[10] (.clk (CLK), .d (in_R_res[10]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[10]));
  CDN_flop \R_res_reg[11] (.clk (CLK), .d (in_R_res[11]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[11]));
  CDN_flop \R_res_reg[12] (.clk (CLK), .d (in_R_res[12]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[12]));
  CDN_flop \R_res_reg[13] (.clk (CLK), .d (in_R_res[13]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[13]));
  CDN_flop \R_res_reg[14] (.clk (CLK), .d (in_R_res[14]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[14]));
  CDN_flop \R_res_reg[15] (.clk (CLK), .d (in_R_res[15]), .sena
       (load_R_res), .aclr (n_124), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[15]));
  nor g84 (n_244, R_cnt[4], R_cnt[3], R_cnt[2], R_cnt[1]);
  nand g85 (n_246, n_244, n_245);
  not g86 (n_168, n_246);
  not g87 (n_124, rst_n);
  not g88 (n_245, R_cnt[0]);
  not g89 (n_169, adder1_out[16]);
  nor g1 (n_128, sel_R_res[0], sel_R_res[1]);
  nor g3 (n_129, n_5, sel_R_res[1]);
  not g4 (n_5, sel_R_res[0]);
endmodule

module divider_OPSIZE16(CLK, rst_n, abort, operand1, operand2, div,
     remainder, start, ready);
  input CLK, rst_n, abort, start;
  input [15:0] operand1, operand2;
  output [15:0] div, remainder;
  output ready;
  wire CLK, rst_n, abort, start;
  wire [15:0] operand1, operand2;
  wire [15:0] div, remainder;
  wire ready;
  wire [1:0] sel_R_A;
  wire [1:0] sel_R_res;
  wire A_majeq_B, load_R_A, load_R_B, load_R_cnt, load_R_res,
       sel_R_cnt, z_cnt;
  divider_ctrl CTRL(.CLK (CLK), .rst_n (rst_n), .abort (abort), .start
       (start), .ready (ready), .load_R_A (load_R_A), .sel_R_A
       (sel_R_A), .load_R_B (load_R_B), .load_R_res (load_R_res),
       .sel_R_res (sel_R_res), .load_R_cnt (load_R_cnt), .sel_R_cnt
       (sel_R_cnt), .A_majeq_B (A_majeq_B), .z_cnt (z_cnt));
  divider_dp_OPSIZE16 DP(.CLK (CLK), .rst_n (rst_n), .operand1
       (operand1), .operand2 (operand2), .div (div), .remainder
       (remainder), .load_R_A (load_R_A), .sel_R_A (sel_R_A), .load_R_B
       (load_R_B), .load_R_res (load_R_res), .sel_R_res (sel_R_res),
       .load_R_cnt (load_R_cnt), .sel_R_cnt (sel_R_cnt), .A_majeq_B
       (A_majeq_B), .z_cnt (z_cnt));
endmodule

module equal_unsigned_109(A, B, Z);
  input [15:0] A;
  input B;
  output Z;
  wire [15:0] A;
  wire B;
  wire Z;
  wire n_19, n_20, n_21, n_22, n_23, n_24, n_25;
  xnor g1 (n_19, A[0], B);
  nor g2 (n_20, A[15], A[14], A[13], A[12]);
  nor g3 (n_21, A[11], A[10], A[9], A[8]);
  nor g4 (n_22, A[7], A[6], A[5], A[4]);
  nor g5 (n_23, A[3], A[2], A[1]);
  nand g6 (n_24, n_19, n_20, n_21, n_22);
  not g7 (n_25, n_23);
  nor g8 (Z, n_24, n_25);
endmodule

module sub_unsigned_113(A, B, Z);
  input [15:0] A, B;
  output [16:0] Z;
  wire [15:0] A, B;
  wire [16:0] Z;
  wire n_52, n_53, n_54, n_55, n_56, n_57, n_58, n_59;
  wire n_60, n_61, n_62, n_63, n_64, n_65, n_66, n_67;
  wire n_68, n_69, n_71, n_72, n_73, n_74, n_75, n_76;
  wire n_77, n_78, n_79, n_80, n_81, n_82, n_83, n_84;
  wire n_85, n_86, n_87, n_88, n_89, n_90, n_91, n_92;
  wire n_93, n_94, n_95, n_96, n_97, n_98, n_99, n_100;
  wire n_101, n_102, n_103, n_104, n_105, n_106, n_107, n_108;
  wire n_109, n_110, n_111, n_112, n_113, n_114, n_115, n_116;
  wire n_117, n_118, n_119, n_120, n_121, n_122, n_123, n_124;
  wire n_125, n_126, n_127, n_128, n_129, n_130, n_131, n_132;
  wire n_133, n_134, n_135, n_136, n_137, n_138, n_139, n_140;
  wire n_141, n_142, n_143, n_144, n_145, n_146, n_147, n_148;
  wire n_149, n_150, n_151, n_152, n_153, n_154, n_155, n_156;
  wire n_157, n_158, n_159, n_160, n_161, n_162, n_163, n_164;
  wire n_165, n_166, n_167, n_168, n_169, n_170, n_171, n_172;
  wire n_173, n_174, n_175, n_176, n_177, n_178, n_179, n_180;
  wire n_181, n_182, n_183, n_184, n_185, n_186, n_187, n_188;
  wire n_189, n_190, n_191, n_192, n_193, n_194, n_195, n_196;
  wire n_197, n_198, n_199, n_200, n_201, n_202, n_203, n_204;
  wire n_205, n_206, n_207, n_208, n_209, n_210, n_211, n_212;
  wire n_213, n_214, n_215, n_216, n_217, n_218, n_219, n_220;
  wire n_221, n_222, n_223, n_224, n_225, n_226, n_227, n_228;
  wire n_229, n_230, n_231, n_232, n_233, n_234, n_235, n_236;
  wire n_237;
  not g2 (n_52, B[15]);
  not g3 (n_53, B[14]);
  not g4 (n_54, B[13]);
  not g5 (n_55, B[12]);
  not g6 (n_56, B[11]);
  not g7 (n_57, B[10]);
  not g8 (n_58, B[9]);
  not g9 (n_59, B[8]);
  not g10 (n_60, B[7]);
  not g11 (n_61, B[6]);
  not g12 (n_62, B[5]);
  not g13 (n_63, B[4]);
  not g14 (n_64, B[3]);
  not g15 (n_65, B[2]);
  not g16 (n_66, B[1]);
  not g17 (n_67, B[0]);
  not g18 (Z[16], n_68);
  xor g19 (n_237, A[0], n_67);
  nand g22 (n_72, n_69, B[0]);
  nor g23 (n_71, A[1], n_66);
  nand g24 (n_74, A[1], n_66);
  nor g25 (n_81, A[2], n_65);
  nand g26 (n_76, A[2], n_65);
  nor g27 (n_77, A[3], n_64);
  nand g28 (n_78, A[3], n_64);
  nor g29 (n_87, A[4], n_63);
  nand g30 (n_82, A[4], n_63);
  nor g31 (n_83, A[5], n_62);
  nand g32 (n_84, A[5], n_62);
  nor g33 (n_93, A[6], n_61);
  nand g34 (n_88, A[6], n_61);
  nor g35 (n_89, A[7], n_60);
  nand g36 (n_90, A[7], n_60);
  nor g37 (n_99, A[8], n_59);
  nand g38 (n_94, A[8], n_59);
  nor g39 (n_95, A[9], n_58);
  nand g40 (n_96, A[9], n_58);
  nor g41 (n_105, A[10], n_57);
  nand g42 (n_100, A[10], n_57);
  nor g43 (n_101, A[11], n_56);
  nand g44 (n_102, A[11], n_56);
  nor g45 (n_111, A[12], n_55);
  nand g46 (n_106, A[12], n_55);
  nor g47 (n_107, A[13], n_54);
  nand g48 (n_108, A[13], n_54);
  nor g49 (n_117, A[14], n_53);
  nand g50 (n_112, A[14], n_53);
  nor g51 (n_113, A[15], n_52);
  nand g52 (n_114, A[15], n_52);
  not g53 (n_73, n_71);
  nand g54 (n_75, n_72, n_73);
  nand g55 (n_118, n_74, n_75);
  nor g56 (n_79, n_76, n_77);
  not g57 (n_80, n_78);
  nor g58 (n_122, n_79, n_80);
  nor g59 (n_121, n_81, n_77);
  nor g60 (n_85, n_82, n_83);
  not g61 (n_86, n_84);
  nor g62 (n_124, n_85, n_86);
  nor g63 (n_127, n_87, n_83);
  nor g64 (n_91, n_88, n_89);
  not g65 (n_92, n_90);
  nor g66 (n_131, n_91, n_92);
  nor g67 (n_129, n_93, n_89);
  nor g68 (n_97, n_94, n_95);
  not g69 (n_98, n_96);
  nor g70 (n_134, n_97, n_98);
  nor g71 (n_137, n_99, n_95);
  nor g72 (n_103, n_100, n_101);
  not g73 (n_104, n_102);
  nor g74 (n_141, n_103, n_104);
  nor g75 (n_139, n_105, n_101);
  nor g76 (n_109, n_106, n_107);
  not g77 (n_110, n_108);
  nor g78 (n_144, n_109, n_110);
  nor g79 (n_147, n_111, n_107);
  nor g80 (n_115, n_112, n_113);
  not g81 (n_116, n_114);
  nor g82 (n_151, n_115, n_116);
  nor g83 (n_149, n_117, n_113);
  not g84 (n_119, n_81);
  nand g85 (n_120, n_118, n_119);
  nand g86 (n_206, n_76, n_120);
  nand g87 (n_123, n_121, n_118);
  nand g88 (n_154, n_122, n_123);
  nor g89 (n_125, n_93, n_124);
  not g90 (n_126, n_88);
  nor g91 (n_160, n_125, n_126);
  not g92 (n_128, n_93);
  nand g93 (n_158, n_127, n_128);
  not g94 (n_130, n_129);
  nor g95 (n_132, n_124, n_130);
  not g96 (n_133, n_131);
  nor g97 (n_164, n_132, n_133);
  nand g98 (n_162, n_127, n_129);
  nor g99 (n_135, n_105, n_134);
  not g100 (n_136, n_100);
  nor g101 (n_187, n_135, n_136);
  not g102 (n_138, n_105);
  nand g103 (n_185, n_137, n_138);
  not g104 (n_140, n_139);
  nor g105 (n_142, n_134, n_140);
  not g106 (n_143, n_141);
  nor g107 (n_166, n_142, n_143);
  nand g108 (n_169, n_137, n_139);
  nor g109 (n_145, n_117, n_144);
  not g110 (n_146, n_112);
  nor g111 (n_174, n_145, n_146);
  not g112 (n_148, n_117);
  nand g113 (n_173, n_147, n_148);
  not g114 (n_150, n_149);
  nor g115 (n_152, n_144, n_150);
  not g116 (n_153, n_151);
  nor g117 (n_178, n_152, n_153);
  nand g118 (n_177, n_147, n_149);
  not g119 (n_155, n_87);
  nand g120 (n_156, n_154, n_155);
  nand g121 (n_210, n_82, n_156);
  nand g122 (n_157, n_127, n_154);
  nand g123 (n_212, n_124, n_157);
  not g124 (n_159, n_158);
  nand g125 (n_161, n_154, n_159);
  nand g126 (n_215, n_160, n_161);
  not g127 (n_163, n_162);
  nand g128 (n_165, n_154, n_163);
  nand g129 (n_181, n_164, n_165);
  nor g130 (n_167, n_111, n_166);
  not g131 (n_168, n_106);
  nor g132 (n_192, n_167, n_168);
  nor g133 (n_191, n_111, n_169);
  not g134 (n_170, n_147);
  nor g135 (n_171, n_166, n_170);
  not g136 (n_172, n_144);
  nor g137 (n_195, n_171, n_172);
  nor g138 (n_194, n_169, n_170);
  nor g139 (n_175, n_173, n_166);
  not g140 (n_176, n_174);
  nor g141 (n_198, n_175, n_176);
  nor g142 (n_197, n_169, n_173);
  nor g143 (n_179, n_177, n_166);
  not g144 (n_180, n_178);
  nor g145 (n_201, n_179, n_180);
  nor g146 (n_200, n_169, n_177);
  not g147 (n_182, n_99);
  nand g148 (n_183, n_181, n_182);
  nand g149 (n_219, n_94, n_183);
  nand g150 (n_184, n_137, n_181);
  nand g151 (n_221, n_134, n_184);
  not g152 (n_186, n_185);
  nand g153 (n_188, n_181, n_186);
  nand g154 (n_224, n_187, n_188);
  not g155 (n_189, n_169);
  nand g156 (n_190, n_181, n_189);
  nand g157 (n_227, n_166, n_190);
  nand g158 (n_193, n_191, n_181);
  nand g159 (n_230, n_192, n_193);
  nand g160 (n_196, n_194, n_181);
  nand g161 (n_232, n_195, n_196);
  nand g162 (n_199, n_197, n_181);
  nand g163 (n_235, n_198, n_199);
  nand g164 (n_202, n_200, n_181);
  nand g165 (n_68, n_201, n_202);
  nand g166 (n_203, n_73, n_74);
  xnor g167 (Z[1], n_72, n_203);
  nand g168 (n_204, n_119, n_76);
  xnor g169 (Z[2], n_118, n_204);
  not g170 (n_205, n_77);
  nand g171 (n_207, n_205, n_78);
  xnor g172 (Z[3], n_206, n_207);
  nand g173 (n_208, n_155, n_82);
  xnor g174 (Z[4], n_154, n_208);
  not g175 (n_209, n_83);
  nand g176 (n_211, n_209, n_84);
  xnor g177 (Z[5], n_210, n_211);
  nand g178 (n_213, n_128, n_88);
  xnor g179 (Z[6], n_212, n_213);
  not g180 (n_214, n_89);
  nand g181 (n_216, n_214, n_90);
  xnor g182 (Z[7], n_215, n_216);
  nand g183 (n_217, n_182, n_94);
  xnor g184 (Z[8], n_181, n_217);
  not g185 (n_218, n_95);
  nand g186 (n_220, n_218, n_96);
  xnor g187 (Z[9], n_219, n_220);
  nand g188 (n_222, n_138, n_100);
  xnor g189 (Z[10], n_221, n_222);
  not g190 (n_223, n_101);
  nand g191 (n_225, n_223, n_102);
  xnor g192 (Z[11], n_224, n_225);
  not g193 (n_226, n_111);
  nand g194 (n_228, n_226, n_106);
  xnor g195 (Z[12], n_227, n_228);
  not g196 (n_229, n_107);
  nand g197 (n_231, n_229, n_108);
  xnor g198 (Z[13], n_230, n_231);
  nand g199 (n_233, n_148, n_112);
  xnor g200 (Z[14], n_232, n_233);
  not g201 (n_234, n_113);
  nand g202 (n_236, n_234, n_114);
  xnor g203 (Z[15], n_235, n_236);
  not g205 (n_69, A[0]);
  not g206 (Z[0], n_237);
endmodule

module bmux_114(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [15:0] in_0, in_1, in_2, in_3;
  output [15:0] z;
  wire [1:0] ctl;
  wire [15:0] in_0, in_1, in_2, in_3;
  wire [15:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[15]), .data1 (in_1[15]),
       .sel1 (ctl[1]), .data2 (in_2[15]), .data3 (in_3[15]), .z
       (z[15]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .z
       (z[14]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .z
       (z[13]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .z
       (z[12]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .z
       (z[11]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .z
       (z[10]));
  CDN_bmux4 g7(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .z (z[9]));
  CDN_bmux4 g8(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .z (z[8]));
  CDN_bmux4 g9(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .z (z[7]));
  CDN_bmux4 g10(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .z (z[6]));
  CDN_bmux4 g11(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g12(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g13(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g14(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g15(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g16(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module mcd_dp_OPSIZE16(CLK, rst_n, operand1, operand2, res, load_R_A,
     sel_R_A, load_R_B, sel_R_B, load_R_res, sel_R_res, div1_abort,
     div1_start, A_majeq_B, z_A, z_B, div1_ready);
  input CLK, rst_n, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  input [15:0] operand1, operand2;
  input [1:0] sel_R_B;
  output [15:0] res;
  output A_majeq_B, z_A, z_B, div1_ready;
  wire CLK, rst_n, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  wire [15:0] operand1, operand2;
  wire [1:0] sel_R_B;
  wire [15:0] res;
  wire A_majeq_B, z_A, z_B, div1_ready;
  wire [15:0] R_A;
  wire [15:0] R_B;
  wire [15:0] div1_remainder;
  wire [16:0] adder1_out;
  wire [15:0] in_R_B;
  wire [15:0] in_R_A;
  wire [15:0] in_R_res;
  wire UNCONNECTED72, UNCONNECTED73, UNCONNECTED74, UNCONNECTED75,
       UNCONNECTED76, UNCONNECTED77, UNCONNECTED78, UNCONNECTED79;
  wire UNCONNECTED80, UNCONNECTED81, UNCONNECTED82, UNCONNECTED83,
       UNCONNECTED84, UNCONNECTED85, UNCONNECTED86, UNCONNECTED87;
  wire UNCONNECTED88, UNCONNECTED89, UNCONNECTED90, UNCONNECTED91,
       UNCONNECTED92, UNCONNECTED93, UNCONNECTED94, UNCONNECTED95;
  wire UNCONNECTED96, UNCONNECTED97, UNCONNECTED98, UNCONNECTED99,
       UNCONNECTED100, UNCONNECTED101, UNCONNECTED102, UNCONNECTED103;
  wire UNCONNECTED104, UNCONNECTED105, UNCONNECTED106, UNCONNECTED107,
       UNCONNECTED108, UNCONNECTED109, UNCONNECTED110, UNCONNECTED111;
  wire UNCONNECTED112, UNCONNECTED113, UNCONNECTED114, UNCONNECTED115,
       UNCONNECTED116, UNCONNECTED117, UNCONNECTED118, UNCONNECTED119;
  wire UNCONNECTED120, UNCONNECTED121, UNCONNECTED122, UNCONNECTED123,
       UNCONNECTED124, UNCONNECTED125, UNCONNECTED126, UNCONNECTED127;
  wire UNCONNECTED128, UNCONNECTED129, UNCONNECTED130, UNCONNECTED131,
       UNCONNECTED132, UNCONNECTED133, UNCONNECTED134, UNCONNECTED135;
  wire n_78, n_118, n_119, n_120;
  divider_OPSIZE16 DIV1(.CLK (CLK), .rst_n (rst_n), .abort
       (div1_abort), .operand1 (R_A), .operand2 (R_B), .div
       ({UNCONNECTED87, UNCONNECTED86, UNCONNECTED85, UNCONNECTED84,
       UNCONNECTED83, UNCONNECTED82, UNCONNECTED81, UNCONNECTED80,
       UNCONNECTED79, UNCONNECTED78, UNCONNECTED77, UNCONNECTED76,
       UNCONNECTED75, UNCONNECTED74, UNCONNECTED73, UNCONNECTED72}),
       .remainder (div1_remainder), .start (div1_start), .ready
       (div1_ready));
  equal_unsigned_109 eq_125_25(.A (R_A), .B (1'b0), .Z (n_119));
  equal_unsigned_109 eq_126_25(.A (R_B), .B (1'b0), .Z (n_118));
  sub_unsigned_113 sub_122_57(.A (R_A), .B (R_B), .Z (adder1_out));
  bmux_114 mux_in_R_B_110_10(.ctl (sel_R_B), .in_0 (operand2), .in_1
       (R_A), .in_2 (div1_remainder), .in_3 (div1_remainder), .z
       (in_R_B));
  bmux_90 mux_R_B_89_18(.ctl (n_78), .in_0 (16'b0000000000000000),
       .in_1 (16'b0000000000000000), .z ({UNCONNECTED103,
       UNCONNECTED102, UNCONNECTED101, UNCONNECTED100, UNCONNECTED99,
       UNCONNECTED98, UNCONNECTED97, UNCONNECTED96, UNCONNECTED95,
       UNCONNECTED94, UNCONNECTED93, UNCONNECTED92, UNCONNECTED91,
       UNCONNECTED90, UNCONNECTED89, UNCONNECTED88}));
  bmux_90 mux_in_R_A_106_10(.ctl (sel_R_A), .in_0 (operand1), .in_1
       (R_B), .z (in_R_A));
  bmux_90 mux_R_A_89_18(.ctl (n_78), .in_0 (16'b0000000000000000),
       .in_1 (16'b0000000000000000), .z ({UNCONNECTED119,
       UNCONNECTED118, UNCONNECTED117, UNCONNECTED116, UNCONNECTED115,
       UNCONNECTED114, UNCONNECTED113, UNCONNECTED112, UNCONNECTED111,
       UNCONNECTED110, UNCONNECTED109, UNCONNECTED108, UNCONNECTED107,
       UNCONNECTED106, UNCONNECTED105, UNCONNECTED104}));
  bmux_90 mux_in_R_res_115_10(.ctl (sel_R_res), .in_0
       (16'b0000000000000000), .in_1 (R_A), .z (in_R_res));
  bmux_90 mux_R_res_89_18(.ctl (n_78), .in_0 (16'b0000000000000000),
       .in_1 (16'b0000000000000000), .z ({UNCONNECTED135,
       UNCONNECTED134, UNCONNECTED133, UNCONNECTED132, UNCONNECTED131,
       UNCONNECTED130, UNCONNECTED129, UNCONNECTED128, UNCONNECTED127,
       UNCONNECTED126, UNCONNECTED125, UNCONNECTED124, UNCONNECTED123,
       UNCONNECTED122, UNCONNECTED121, UNCONNECTED120}));
  bmux mux_z_B_126_25(.ctl (n_118), .in_0 (1'b0), .in_1 (1'b1), .z
       (z_B));
  bmux mux_z_A_125_25(.ctl (n_119), .in_0 (1'b0), .in_1 (1'b1), .z
       (z_A));
  bmux mux_A_majeq_B_124_55(.ctl (n_120), .in_0 (1'b0), .in_1 (1'b1),
       .z (A_majeq_B));
  CDN_flop \R_A_reg[0] (.clk (CLK), .d (in_R_A[0]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[0]));
  CDN_flop \R_A_reg[1] (.clk (CLK), .d (in_R_A[1]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[1]));
  CDN_flop \R_A_reg[2] (.clk (CLK), .d (in_R_A[2]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[2]));
  CDN_flop \R_A_reg[3] (.clk (CLK), .d (in_R_A[3]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[3]));
  CDN_flop \R_A_reg[4] (.clk (CLK), .d (in_R_A[4]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[4]));
  CDN_flop \R_A_reg[5] (.clk (CLK), .d (in_R_A[5]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[5]));
  CDN_flop \R_A_reg[6] (.clk (CLK), .d (in_R_A[6]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[6]));
  CDN_flop \R_A_reg[7] (.clk (CLK), .d (in_R_A[7]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[7]));
  CDN_flop \R_A_reg[8] (.clk (CLK), .d (in_R_A[8]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[8]));
  CDN_flop \R_A_reg[9] (.clk (CLK), .d (in_R_A[9]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[9]));
  CDN_flop \R_A_reg[10] (.clk (CLK), .d (in_R_A[10]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[10]));
  CDN_flop \R_A_reg[11] (.clk (CLK), .d (in_R_A[11]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[11]));
  CDN_flop \R_A_reg[12] (.clk (CLK), .d (in_R_A[12]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[12]));
  CDN_flop \R_A_reg[13] (.clk (CLK), .d (in_R_A[13]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[13]));
  CDN_flop \R_A_reg[14] (.clk (CLK), .d (in_R_A[14]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[14]));
  CDN_flop \R_A_reg[15] (.clk (CLK), .d (in_R_A[15]), .sena (load_R_A),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[15]));
  CDN_flop \R_B_reg[0] (.clk (CLK), .d (in_R_B[0]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[0]));
  CDN_flop \R_B_reg[1] (.clk (CLK), .d (in_R_B[1]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[1]));
  CDN_flop \R_B_reg[2] (.clk (CLK), .d (in_R_B[2]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[2]));
  CDN_flop \R_B_reg[3] (.clk (CLK), .d (in_R_B[3]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[3]));
  CDN_flop \R_B_reg[4] (.clk (CLK), .d (in_R_B[4]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[4]));
  CDN_flop \R_B_reg[5] (.clk (CLK), .d (in_R_B[5]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[5]));
  CDN_flop \R_B_reg[6] (.clk (CLK), .d (in_R_B[6]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[6]));
  CDN_flop \R_B_reg[7] (.clk (CLK), .d (in_R_B[7]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[7]));
  CDN_flop \R_B_reg[8] (.clk (CLK), .d (in_R_B[8]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[8]));
  CDN_flop \R_B_reg[9] (.clk (CLK), .d (in_R_B[9]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[9]));
  CDN_flop \R_B_reg[10] (.clk (CLK), .d (in_R_B[10]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[10]));
  CDN_flop \R_B_reg[11] (.clk (CLK), .d (in_R_B[11]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[11]));
  CDN_flop \R_B_reg[12] (.clk (CLK), .d (in_R_B[12]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[12]));
  CDN_flop \R_B_reg[13] (.clk (CLK), .d (in_R_B[13]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[13]));
  CDN_flop \R_B_reg[14] (.clk (CLK), .d (in_R_B[14]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[14]));
  CDN_flop \R_B_reg[15] (.clk (CLK), .d (in_R_B[15]), .sena (load_R_B),
       .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[15]));
  CDN_flop \R_res_reg[0] (.clk (CLK), .d (in_R_res[0]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[0]));
  CDN_flop \R_res_reg[1] (.clk (CLK), .d (in_R_res[1]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[1]));
  CDN_flop \R_res_reg[2] (.clk (CLK), .d (in_R_res[2]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[2]));
  CDN_flop \R_res_reg[3] (.clk (CLK), .d (in_R_res[3]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[3]));
  CDN_flop \R_res_reg[4] (.clk (CLK), .d (in_R_res[4]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[4]));
  CDN_flop \R_res_reg[5] (.clk (CLK), .d (in_R_res[5]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[5]));
  CDN_flop \R_res_reg[6] (.clk (CLK), .d (in_R_res[6]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[6]));
  CDN_flop \R_res_reg[7] (.clk (CLK), .d (in_R_res[7]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[7]));
  CDN_flop \R_res_reg[8] (.clk (CLK), .d (in_R_res[8]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[8]));
  CDN_flop \R_res_reg[9] (.clk (CLK), .d (in_R_res[9]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[9]));
  CDN_flop \R_res_reg[10] (.clk (CLK), .d (in_R_res[10]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[10]));
  CDN_flop \R_res_reg[11] (.clk (CLK), .d (in_R_res[11]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[11]));
  CDN_flop \R_res_reg[12] (.clk (CLK), .d (in_R_res[12]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[12]));
  CDN_flop \R_res_reg[13] (.clk (CLK), .d (in_R_res[13]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[13]));
  CDN_flop \R_res_reg[14] (.clk (CLK), .d (in_R_res[14]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[14]));
  CDN_flop \R_res_reg[15] (.clk (CLK), .d (in_R_res[15]), .sena
       (load_R_res), .aclr (n_78), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[15]));
  not g61 (n_78, rst_n);
  not g62 (n_120, adder1_out[16]);
endmodule

module mcd_OPSIZE16(CLK, rst_n, abort, operand1, operand2, res, start,
     ready);
  input CLK, rst_n, abort, start;
  input [15:0] operand1, operand2;
  output [15:0] res;
  output ready;
  wire CLK, rst_n, abort, start;
  wire [15:0] operand1, operand2;
  wire [15:0] res;
  wire ready;
  wire [1:0] sel_R_B;
  wire A_majeq_B, div1_abort, div1_ready, div1_start, load_R_A,
       load_R_B, load_R_res, sel_R_A;
  wire sel_R_res, z_A, z_B;
  mcd_ctrl CTRL(.CLK (CLK), .rst_n (rst_n), .abort (abort), .start
       (start), .ready (ready), .load_R_A (load_R_A), .sel_R_A
       (sel_R_A), .load_R_B (load_R_B), .sel_R_B (sel_R_B), .load_R_res
       (load_R_res), .sel_R_res (sel_R_res), .div1_abort (div1_abort),
       .div1_start (div1_start), .A_majeq_B (A_majeq_B), .z_A (z_A),
       .z_B (z_B), .div1_ready (div1_ready));
  mcd_dp_OPSIZE16 DP(.CLK (CLK), .rst_n (rst_n), .operand1 (operand1),
       .operand2 (operand2), .res (res), .load_R_A (load_R_A), .sel_R_A
       (sel_R_A), .load_R_B (load_R_B), .sel_R_B (sel_R_B), .load_R_res
       (load_R_res), .sel_R_res (sel_R_res), .div1_abort (div1_abort),
       .div1_start (div1_start), .A_majeq_B (A_majeq_B), .z_A (z_A),
       .z_B (z_B), .div1_ready (div1_ready));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux4(sel0, data0, data1, sel1, data2, data3, z);
  input sel0, data0, data1, sel1, data2, data3;
  output z;
  wire sel0, data0, data1, sel1, data2, data3;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1 or data2 or data3) 
      case ({sel0, sel1})
       2'b00: z = data0;
       2'b10: z = data1;
       2'b01: z = data2;
       2'b11: z = data3;
      endcase
endmodule
`else
module CDN_bmux4(sel0, data0, data1, sel1, data2, data3, z);
  input sel0, data0, data1, sel1, data2, data3;
  output z;
  wire sel0, data0, data1, sel1, data2, data3;
  wire z;
  wire inv_sel0, inv_sel1, w_0, w_1, w_2, w_3;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  and a_0 (w_0, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel1, sel0, data1);
  and a_2 (w_2, sel1, inv_sel0, data2);
  and a_3 (w_3, sel1, sel0, data3);
  or org (z, w_0, w_1, w_2, w_3);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux3(sel0, data0, data1, sel1, data2, z);
  input sel0, data0, data1, sel1, data2;
  output z;
  wire sel0, data0, data1, sel1, data2;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1 or data2) 
      case ({sel0, sel1})
       2'b00: z = data0;
       2'b10: z = data1;
       2'b01: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_bmux3(sel0, data0, data1, sel1, data2, z);
  input sel0, data0, data1, sel1, data2;
  output z;
  wire sel0, data0, data1, sel1, data2;
  wire z;
  wire inv_sel0, inv_sel1, w_0, w_1, w_2;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  and a_0 (w_0, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel1, sel0, data1);
  and a_2 (w_2, sel1, inv_sel0, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
