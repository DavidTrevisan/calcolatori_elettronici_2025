
// Generated by Cadence Genus(TM) Synthesis Solution 19.14-s108_1
// Generated on: Jul 10 2025 15:40:10 CEST (Jul 10 2025 13:40:10 UTC)

// Verification Directory fv/mcd_OPSIZE32 

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_28(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_31(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl, in_0, in_1, in_2, in_3;
  output [1:0] z;
  wire [1:0] ctl, in_0, in_1, in_2, in_3;
  wire [1:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module case_box(in_0, out_0);
  input [1:0] in_0;
  output [2:0] out_0;
  wire [1:0] in_0;
  wire [2:0] out_0;
  wire n_5;
  assign out_0[0] = in_0[1];
  nor g1 (out_0[2], in_0[0], in_0[1]);
  nor g3 (out_0[1], n_5, in_0[1]);
  not g4 (n_5, in_0[0]);
endmodule

module mux(ctl, in_0, in_1, in_2, z);
  input [2:0] ctl;
  input [1:0] in_0, in_1, in_2;
  output [1:0] z;
  wire [2:0] ctl;
  wire [1:0] in_0, in_1, in_2;
  wire [1:0] z;
  CDN_mux3 g1(.sel0 (ctl[2]), .data0 (in_0[1]), .sel1 (ctl[1]), .data1
       (in_1[1]), .sel2 (ctl[0]), .data2 (in_2[1]), .z (z[1]));
  CDN_mux3 g3(.sel0 (ctl[2]), .data0 (in_0[0]), .sel1 (ctl[1]), .data1
       (in_1[0]), .sel2 (ctl[0]), .data2 (in_2[0]), .z (z[0]));
endmodule

module mcd_ctrl(CLK, rst_n, abort, start, ready, load_R_A, sel_R_A,
     load_R_B, sel_R_B, load_R_res, sel_R_res, div1_abort, div1_start,
     A_majeq_B, z_A, z_B, div1_ready);
  input CLK, rst_n, abort, start, A_majeq_B, z_A, z_B, div1_ready;
  output ready, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  output [1:0] sel_R_B;
  wire CLK, rst_n, abort, start, A_majeq_B, z_A, z_B, div1_ready;
  wire ready, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  wire [1:0] sel_R_B;
  wire [1:0] nextstate;
  wire [1:0] state;
  wire UNCONNECTED, UNCONNECTED0, n_59, n_62, n_63, n_64, n_67, n_68;
  wire n_69, n_70, n_71, n_72, n_73, n_74, n_75, n_76;
  wire n_77, n_78, n_79, n_80, n_81, n_85, n_86, n_87;
  wire n_88, n_89, n_90, n_95, n_97, n_100, n_103, n_104;
  wire n_125, n_126, n_127, n_130, n_133, n_136, n_137;
  assign div1_abort = abort;
  bmux mux_nextstate_83_26(.ctl (start), .in_0 (1'b0), .in_1 (1'b1), .z
       (nextstate[0]));
  bmux mux_nextstate_91_33(.ctl (n_63), .in_0 (1'b1), .in_1 (1'b0), .z
       (n_64));
  bmux_28 mux_nextstate_89_30(.ctl (n_62), .in_0 ({1'b1, n_64}), .in_1
       (2'b00), .z ({nextstate[1], n_67}));
  bmux_28 mux_nextstate_97_24(.ctl (z_B), .in_0 (2'b11), .in_1 (2'b00),
       .z ({n_70, n_68}));
  bmux mux_nextstate_103_31(.ctl (div1_ready), .in_0 (1'b1), .in_1
       (1'b0), .z (n_69));
  bmux_31 mux_nextstate_81_14(.ctl (state), .in_0 ({1'b0,
       nextstate[0]}), .in_1 ({nextstate[1], n_67}), .in_2 ({n_70,
       n_68}), .in_3 ({1'b1, n_69}), .z ({n_72, n_71}));
  bmux_28 mux_nextstate_109_18(.ctl (abort), .in_0 (2'b00), .in_1
       (2'b00), .z ({n_74, n_73}));
  bmux_28 mux_state_72_18(.ctl (n_59), .in_0 (2'b00), .in_1 (2'b00), .z
       ({UNCONNECTED0, UNCONNECTED}));
  bmux mux_div1_start_138_94(.ctl (n_75), .in_0 (1'b0), .in_1 (1'b1),
       .z (div1_start));
  bmux mux_sel_R_res_136_33(.ctl (n_76), .in_0 (1'b1), .in_1 (1'b0), .z
       (sel_R_res));
  bmux mux_load_R_res_132_61(.ctl (n_77), .in_0 (1'b0), .in_1 (1'b1),
       .z (load_R_res));
  case_box ctl_state_128_26(.in_0 (state), .out_0 ({n_78, n_79, n_80}));
  mux mux_sel_R_B_128_26(.ctl ({n_78, n_79, n_80}), .in_0 (2'b00),
       .in_1 (2'b01), .in_2 (2'b10), .z (sel_R_B));
  bmux mux_load_R_B_124_55(.ctl (n_81), .in_0 (1'b0), .in_1 (1'b1), .z
       (load_R_B));
  bmux mux_sel_R_A_121_31(.ctl (n_76), .in_0 (1'b1), .in_1 (1'b0), .z
       (sel_R_A));
  bmux mux_load_R_A_117_55(.ctl (n_81), .in_0 (1'b0), .in_1 (1'b1), .z
       (load_R_A));
  bmux mux_ready_114_29(.ctl (n_76), .in_0 (1'b0), .in_1 (1'b1), .z
       (ready));
  CDN_flop \state_reg[0] (.clk (CLK), .d (n_71), .sena (1'b1), .aclr
       (n_59), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[0]));
  CDN_flop \state_reg[1] (.clk (CLK), .d (n_72), .sena (1'b1), .aclr
       (n_59), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[1]));
  or g1 (n_62, z_A, z_B);
  and g39 (n_87, n_85, n_63);
  or g40 (n_89, n_86, n_87);
  and g41 (n_90, n_88, div1_ready);
  or g42 (n_81, n_89, n_90);
  and g43 (n_86, n_76, start);
  and g44 (n_97, n_95, z_B);
  or g45 (n_77, n_86, n_97);
  and g49 (n_104, n_95, n_100);
  or g50 (n_75, n_103, n_104);
  nand g3 (n_127, n_125, n_126);
  not g4 (n_76, n_127);
  not g60 (n_126, state[1]);
  nand g61 (n_130, state[0], n_126);
  not g62 (n_85, n_130);
  nand g65 (n_133, state[1], state[0]);
  not g66 (n_88, n_133);
  nand g69 (n_136, state[1], n_125);
  not g70 (n_95, n_136);
  not g74 (n_59, rst_n);
  not g75 (n_63, A_majeq_B);
  not g77 (n_100, z_B);
  not g78 (n_125, state[0]);
  and g79 (n_103, n_137, n_85, n_100, A_majeq_B);
  not g80 (n_137, z_A);
endmodule

module bmux_59(ctl, in_0, in_1, in_2, z);
  input [1:0] ctl, in_0, in_1, in_2;
  output [1:0] z;
  wire [1:0] ctl, in_0, in_1, in_2;
  wire [1:0] z;
  CDN_bmux3 g1(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .z (z[1]));
  CDN_bmux3 g2(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .z (z[0]));
endmodule

module divider_ctrl(CLK, rst_n, abort, start, ready, load_R_A, sel_R_A,
     load_R_B, load_R_res, sel_R_res, load_R_cnt, sel_R_cnt, A_majeq_B,
     z_cnt);
  input CLK, rst_n, abort, start, A_majeq_B, z_cnt;
  output ready, load_R_A, load_R_B, load_R_res, load_R_cnt, sel_R_cnt;
  output [1:0] sel_R_A, sel_R_res;
  wire CLK, rst_n, abort, start, A_majeq_B, z_cnt;
  wire ready, load_R_A, load_R_B, load_R_res, load_R_cnt, sel_R_cnt;
  wire [1:0] sel_R_A, sel_R_res;
  wire [1:0] nextstate;
  wire [1:0] state;
  wire UNCONNECTED1, UNCONNECTED2, n_48, n_52, n_53, n_54, n_55, n_56;
  wire n_57, n_59, n_60, n_61, n_62, n_63, n_64, n_67;
  wire n_68, n_88, n_89, n_90, n_93;
  bmux mux_nextstate_76_26(.ctl (start), .in_0 (1'b0), .in_1 (1'b1), .z
       (nextstate[0]));
  bmux mux_nextstate_84_26(.ctl (z_cnt), .in_0 (1'b1), .in_1 (1'b0), .z
       (nextstate[1]));
  bmux_59 mux_nextstate_74_14(.ctl (state), .in_0 ({1'b0,
       nextstate[0]}), .in_1 (2'b10), .in_2 ({nextstate[1], 1'b0}), .z
       ({n_53, n_52}));
  bmux_28 mux_nextstate_90_18(.ctl (abort), .in_0 (2'b00), .in_1
       (2'b00), .z ({n_55, n_54}));
  bmux_28 mux_state_65_18(.ctl (n_48), .in_0 (2'b00), .in_1 (2'b00), .z
       ({UNCONNECTED2, UNCONNECTED1}));
  bmux mux_sel_R_cnt_111_33(.ctl (n_56), .in_0 (1'b1), .in_1 (1'b0), .z
       (sel_R_cnt));
  bmux mux_load_R_cnt_109_43(.ctl (n_57), .in_0 (1'b0), .in_1 (1'b1),
       .z (load_R_cnt));
  bmux_28 mux_sel_R_res_106_29(.ctl (A_majeq_B), .in_0 (2'b10), .in_1
       (2'b01), .z ({n_60, n_59}));
  bmux_28 mux_sel_R_res_105_34(.ctl (n_56), .in_0 ({n_60, n_59}), .in_1
       (2'b00), .z (sel_R_res));
  bmux mux_load_R_res_103_43(.ctl (n_61), .in_0 (1'b1), .in_1 (1'b0),
       .z (load_R_res));
  bmux mux_load_R_B_101_42(.ctl (n_62), .in_0 (1'b0), .in_1 (1'b1), .z
       (load_R_B));
  bmux_28 mux_sel_R_A_98_29(.ctl (A_majeq_B), .in_0 (2'b10), .in_1
       (2'b01), .z ({n_64, n_63}));
  bmux_28 mux_sel_R_A_97_32(.ctl (n_56), .in_0 ({n_64, n_63}), .in_1
       (2'b00), .z (sel_R_A));
  bmux mux_load_R_A_95_41(.ctl (n_61), .in_0 (1'b1), .in_1 (1'b0), .z
       (load_R_A));
  bmux mux_ready_113_29(.ctl (n_56), .in_0 (1'b0), .in_1 (1'b1), .z
       (ready));
  CDN_flop \state_reg[0] (.clk (CLK), .d (n_52), .sena (1'b1), .aclr
       (n_48), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[0]));
  CDN_flop \state_reg[1] (.clk (CLK), .d (n_53), .sena (1'b1), .aclr
       (n_48), .apre (1'b0), .srl (abort), .srd (1'b0), .q (state[1]));
  and g16 (n_62, n_56, start);
  and g17 (n_61, n_56, n_67);
  or g18 (n_57, n_56, n_68);
  not g2 (n_89, state[1]);
  nand g3 (n_90, n_88, n_89);
  not g4 (n_56, n_90);
  nand g28 (n_93, state[1], n_88);
  not g29 (n_68, n_93);
  not g30 (n_48, rst_n);
  not g31 (n_88, state[0]);
  not g32 (n_67, start);
endmodule

module sub_unsigned(A, B, Z);
  input [5:0] A;
  input B;
  output [5:0] Z;
  wire [5:0] A;
  wire B;
  wire [5:0] Z;
  wire n_26, n_29, n_32, n_34, n_35, n_36, n_42, n_48;
  wire n_50, n_52, n_54, n_56, n_63, n_67, n_69;
  not g7 (n_26, B);
  xor g9 (n_69, A[0], n_26);
  nand g12 (n_32, n_29, B);
  nand g25 (n_48, n_34, n_35);
  nor g28 (n_52, A[2], A[3]);
  nand g36 (n_63, n_36, n_50);
  nand g38 (n_54, n_52, n_50);
  nand g41 (n_67, n_42, n_56);
  xnor g45 (Z[1], n_32, A[1]);
  xnor g47 (Z[2], n_48, A[2]);
  xnor g50 (Z[3], n_63, A[3]);
  xnor g52 (Z[4], n_54, A[4]);
  xnor g55 (Z[5], n_67, A[5]);
  not g57 (n_42, A[4]);
  not g59 (n_36, A[2]);
  not g61 (n_34, A[1]);
  not g62 (n_29, A[0]);
  not g63 (Z[0], n_69);
  not g64 (n_35, n_32);
  not g65 (n_50, n_48);
  not g66 (n_56, n_54);
endmodule

module sub_unsigned_79(A, B, Z);
  input [32:0] A;
  input [31:0] B;
  output [32:0] Z;
  wire [32:0] A;
  wire [31:0] B;
  wire [32:0] Z;
  wire n_103, n_104, n_105, n_106, n_107, n_108, n_109, n_110;
  wire n_111, n_112, n_113, n_114, n_115, n_116, n_117, n_118;
  wire n_119, n_120, n_121, n_122, n_123, n_124, n_125, n_126;
  wire n_127, n_128, n_129, n_130, n_131, n_132, n_133, n_134;
  wire n_137, n_139, n_140, n_141, n_142, n_143, n_144, n_145;
  wire n_146, n_147, n_148, n_149, n_150, n_151, n_152, n_153;
  wire n_154, n_155, n_156, n_157, n_158, n_159, n_160, n_161;
  wire n_162, n_163, n_164, n_165, n_166, n_167, n_168, n_169;
  wire n_170, n_171, n_172, n_173, n_174, n_175, n_176, n_177;
  wire n_178, n_179, n_180, n_181, n_182, n_183, n_184, n_185;
  wire n_186, n_187, n_188, n_189, n_190, n_191, n_192, n_193;
  wire n_194, n_195, n_196, n_197, n_198, n_199, n_200, n_201;
  wire n_202, n_203, n_204, n_205, n_206, n_207, n_208, n_209;
  wire n_210, n_211, n_212, n_213, n_214, n_215, n_216, n_217;
  wire n_218, n_219, n_220, n_221, n_222, n_223, n_224, n_225;
  wire n_226, n_227, n_228, n_229, n_230, n_231, n_232, n_233;
  wire n_234, n_235, n_236, n_237, n_238, n_239, n_240, n_241;
  wire n_242, n_243, n_244, n_245, n_246, n_247, n_248, n_249;
  wire n_250, n_251, n_252, n_253, n_254, n_255, n_256, n_257;
  wire n_258, n_259, n_260, n_261, n_262, n_263, n_264, n_265;
  wire n_266, n_267, n_268, n_269, n_270, n_271, n_272, n_273;
  wire n_274, n_275, n_276, n_277, n_278, n_279, n_280, n_281;
  wire n_282, n_283, n_284, n_285, n_286, n_287, n_288, n_289;
  wire n_290, n_291, n_292, n_293, n_294, n_295, n_296, n_297;
  wire n_298, n_299, n_300, n_301, n_302, n_303, n_304, n_305;
  wire n_306, n_307, n_308, n_309, n_310, n_311, n_312, n_313;
  wire n_314, n_315, n_316, n_317, n_318, n_319, n_320, n_321;
  wire n_322, n_323, n_324, n_325, n_326, n_327, n_328, n_329;
  wire n_330, n_331, n_332, n_333, n_334, n_335, n_336, n_337;
  wire n_338, n_339, n_340, n_341, n_342, n_343, n_344, n_345;
  wire n_346, n_347, n_348, n_349, n_350, n_351, n_352, n_353;
  wire n_354, n_355, n_356, n_357, n_358, n_359, n_360, n_361;
  wire n_362, n_363, n_364, n_365, n_366, n_367, n_368, n_369;
  wire n_370, n_371, n_372, n_373, n_374, n_375, n_376, n_377;
  wire n_378, n_379, n_380, n_381, n_382, n_383, n_384, n_385;
  wire n_386, n_387, n_388, n_389, n_390, n_391, n_392, n_393;
  wire n_394, n_395, n_396, n_397, n_398, n_399, n_400, n_401;
  wire n_402, n_403, n_404, n_405, n_406, n_407, n_408, n_409;
  wire n_410, n_411, n_412, n_413, n_414, n_415, n_416, n_417;
  wire n_418, n_419, n_420, n_421, n_422, n_423, n_424, n_425;
  wire n_426, n_427, n_428, n_429, n_430, n_431, n_432, n_433;
  wire n_434, n_435, n_436, n_437, n_438, n_439, n_440, n_441;
  wire n_442, n_443, n_444, n_445, n_446, n_447, n_448, n_449;
  wire n_450, n_451, n_452, n_453, n_454, n_455, n_456, n_457;
  wire n_458, n_459, n_460, n_461, n_462, n_463, n_464, n_465;
  wire n_466, n_467, n_468, n_469, n_470, n_471, n_472, n_473;
  wire n_474, n_475, n_476, n_478, n_482, n_483, n_484, n_485;
  wire n_486, n_487, n_488, n_489, n_490, n_491, n_492, n_493;
  wire n_494, n_495, n_496, n_497, n_498, n_499, n_500, n_501;
  wire n_502, n_503, n_504, n_505, n_506, n_507, n_508, n_509;
  wire n_510, n_511, n_512, n_513, n_514, n_515, n_516, n_517;
  wire n_518, n_519, n_520, n_521, n_522, n_523, n_524, n_525;
  wire n_526, n_527, n_528, n_529, n_530, n_531, n_532, n_533;
  wire n_534, n_535, n_536, n_537, n_538, n_539, n_540, n_541;
  wire n_542, n_543, n_544, n_545, n_546, n_547, n_548, n_549;
  wire n_550, n_551, n_552, n_553, n_554, n_555, n_556, n_558;
  not g3 (n_103, B[31]);
  not g4 (n_104, B[30]);
  not g5 (n_105, B[29]);
  not g6 (n_106, B[28]);
  not g7 (n_107, B[27]);
  not g8 (n_108, B[26]);
  not g9 (n_109, B[25]);
  not g10 (n_110, B[24]);
  not g11 (n_111, B[23]);
  not g12 (n_112, B[22]);
  not g13 (n_113, B[21]);
  not g14 (n_114, B[20]);
  not g15 (n_115, B[19]);
  not g16 (n_116, B[18]);
  not g17 (n_117, B[17]);
  not g18 (n_118, B[16]);
  not g19 (n_119, B[15]);
  not g20 (n_120, B[14]);
  not g21 (n_121, B[13]);
  not g22 (n_122, B[12]);
  not g23 (n_123, B[11]);
  not g24 (n_124, B[10]);
  not g25 (n_125, B[9]);
  not g26 (n_126, B[8]);
  not g27 (n_127, B[7]);
  not g28 (n_128, B[6]);
  not g29 (n_129, B[5]);
  not g30 (n_130, B[4]);
  not g31 (n_131, B[3]);
  not g32 (n_132, B[2]);
  not g33 (n_133, B[1]);
  not g34 (n_134, B[0]);
  xor g36 (n_558, A[0], n_134);
  nand g39 (n_140, n_137, B[0]);
  nor g40 (n_139, A[1], n_133);
  nand g41 (n_142, A[1], n_133);
  nor g42 (n_149, A[2], n_132);
  nand g43 (n_144, A[2], n_132);
  nor g44 (n_145, A[3], n_131);
  nand g45 (n_146, A[3], n_131);
  nor g46 (n_155, A[4], n_130);
  nand g47 (n_150, A[4], n_130);
  nor g48 (n_151, A[5], n_129);
  nand g49 (n_152, A[5], n_129);
  nor g50 (n_161, A[6], n_128);
  nand g51 (n_156, A[6], n_128);
  nor g52 (n_157, A[7], n_127);
  nand g53 (n_158, A[7], n_127);
  nor g54 (n_167, A[8], n_126);
  nand g55 (n_162, A[8], n_126);
  nor g56 (n_163, A[9], n_125);
  nand g57 (n_164, A[9], n_125);
  nor g58 (n_173, A[10], n_124);
  nand g59 (n_168, A[10], n_124);
  nor g60 (n_169, A[11], n_123);
  nand g61 (n_170, A[11], n_123);
  nor g62 (n_179, A[12], n_122);
  nand g63 (n_174, A[12], n_122);
  nor g64 (n_175, A[13], n_121);
  nand g65 (n_176, A[13], n_121);
  nor g66 (n_185, A[14], n_120);
  nand g67 (n_180, A[14], n_120);
  nor g68 (n_181, A[15], n_119);
  nand g69 (n_182, A[15], n_119);
  nor g70 (n_191, A[16], n_118);
  nand g71 (n_186, A[16], n_118);
  nor g72 (n_187, A[17], n_117);
  nand g73 (n_188, A[17], n_117);
  nor g74 (n_197, A[18], n_116);
  nand g75 (n_192, A[18], n_116);
  nor g76 (n_193, A[19], n_115);
  nand g77 (n_194, A[19], n_115);
  nor g78 (n_203, A[20], n_114);
  nand g79 (n_198, A[20], n_114);
  nor g80 (n_199, A[21], n_113);
  nand g81 (n_200, A[21], n_113);
  nor g82 (n_209, A[22], n_112);
  nand g83 (n_204, A[22], n_112);
  nor g84 (n_205, A[23], n_111);
  nand g85 (n_206, A[23], n_111);
  nor g86 (n_215, A[24], n_110);
  nand g87 (n_210, A[24], n_110);
  nor g88 (n_211, A[25], n_109);
  nand g89 (n_212, A[25], n_109);
  nor g90 (n_221, A[26], n_108);
  nand g91 (n_216, A[26], n_108);
  nor g92 (n_217, A[27], n_107);
  nand g93 (n_218, A[27], n_107);
  nor g94 (n_227, A[28], n_106);
  nand g95 (n_222, A[28], n_106);
  nor g96 (n_223, A[29], n_105);
  nand g97 (n_224, A[29], n_105);
  nor g98 (n_233, A[30], n_104);
  nand g99 (n_228, A[30], n_104);
  nor g100 (n_229, A[31], n_103);
  nand g101 (n_230, A[31], n_103);
  not g104 (n_141, n_139);
  nand g105 (n_143, n_140, n_141);
  nand g106 (n_234, n_142, n_143);
  nor g107 (n_147, n_144, n_145);
  not g108 (n_148, n_146);
  nor g109 (n_238, n_147, n_148);
  nor g110 (n_237, n_149, n_145);
  nor g111 (n_153, n_150, n_151);
  not g112 (n_154, n_152);
  nor g113 (n_240, n_153, n_154);
  nor g114 (n_243, n_155, n_151);
  nor g115 (n_159, n_156, n_157);
  not g116 (n_160, n_158);
  nor g117 (n_247, n_159, n_160);
  nor g118 (n_245, n_161, n_157);
  nor g119 (n_165, n_162, n_163);
  not g120 (n_166, n_164);
  nor g121 (n_250, n_165, n_166);
  nor g122 (n_253, n_167, n_163);
  nor g123 (n_171, n_168, n_169);
  not g124 (n_172, n_170);
  nor g125 (n_257, n_171, n_172);
  nor g126 (n_255, n_173, n_169);
  nor g127 (n_177, n_174, n_175);
  not g128 (n_178, n_176);
  nor g129 (n_260, n_177, n_178);
  nor g130 (n_263, n_179, n_175);
  nor g131 (n_183, n_180, n_181);
  not g132 (n_184, n_182);
  nor g133 (n_267, n_183, n_184);
  nor g134 (n_265, n_185, n_181);
  nor g135 (n_189, n_186, n_187);
  not g136 (n_190, n_188);
  nor g137 (n_270, n_189, n_190);
  nor g138 (n_273, n_191, n_187);
  nor g139 (n_195, n_192, n_193);
  not g140 (n_196, n_194);
  nor g141 (n_277, n_195, n_196);
  nor g142 (n_275, n_197, n_193);
  nor g143 (n_201, n_198, n_199);
  not g144 (n_202, n_200);
  nor g145 (n_280, n_201, n_202);
  nor g146 (n_283, n_203, n_199);
  nor g147 (n_207, n_204, n_205);
  not g148 (n_208, n_206);
  nor g149 (n_287, n_207, n_208);
  nor g150 (n_285, n_209, n_205);
  nor g151 (n_213, n_210, n_211);
  not g152 (n_214, n_212);
  nor g153 (n_290, n_213, n_214);
  nor g154 (n_293, n_215, n_211);
  nor g155 (n_219, n_216, n_217);
  not g156 (n_220, n_218);
  nor g157 (n_297, n_219, n_220);
  nor g158 (n_295, n_221, n_217);
  nor g159 (n_225, n_222, n_223);
  not g160 (n_226, n_224);
  nor g161 (n_300, n_225, n_226);
  nor g162 (n_303, n_227, n_223);
  nor g163 (n_231, n_228, n_229);
  not g164 (n_232, n_230);
  nor g165 (n_307, n_231, n_232);
  nor g166 (n_305, n_233, n_229);
  not g167 (n_235, n_149);
  nand g168 (n_236, n_234, n_235);
  nand g169 (n_485, n_144, n_236);
  nand g170 (n_239, n_237, n_234);
  nand g171 (n_310, n_238, n_239);
  nor g172 (n_241, n_161, n_240);
  not g173 (n_242, n_156);
  nor g174 (n_316, n_241, n_242);
  not g175 (n_244, n_161);
  nand g176 (n_314, n_243, n_244);
  not g177 (n_246, n_245);
  nor g178 (n_248, n_240, n_246);
  not g179 (n_249, n_247);
  nor g180 (n_320, n_248, n_249);
  nand g181 (n_318, n_243, n_245);
  nor g182 (n_251, n_173, n_250);
  not g183 (n_252, n_168);
  nor g184 (n_373, n_251, n_252);
  not g185 (n_254, n_173);
  nand g186 (n_371, n_253, n_254);
  not g187 (n_256, n_255);
  nor g188 (n_258, n_250, n_256);
  not g189 (n_259, n_257);
  nor g190 (n_322, n_258, n_259);
  nand g191 (n_325, n_253, n_255);
  nor g192 (n_261, n_185, n_260);
  not g193 (n_262, n_180);
  nor g194 (n_330, n_261, n_262);
  not g195 (n_264, n_185);
  nand g196 (n_329, n_263, n_264);
  not g197 (n_266, n_265);
  nor g198 (n_268, n_260, n_266);
  not g199 (n_269, n_267);
  nor g200 (n_334, n_268, n_269);
  nand g201 (n_333, n_263, n_265);
  nor g202 (n_271, n_197, n_270);
  not g203 (n_272, n_192);
  nor g204 (n_431, n_271, n_272);
  not g205 (n_274, n_197);
  nand g206 (n_429, n_273, n_274);
  not g207 (n_276, n_275);
  nor g208 (n_278, n_270, n_276);
  not g209 (n_279, n_277);
  nor g210 (n_337, n_278, n_279);
  nand g211 (n_340, n_273, n_275);
  nor g212 (n_281, n_209, n_280);
  not g213 (n_282, n_204);
  nor g214 (n_345, n_281, n_282);
  not g215 (n_284, n_209);
  nand g216 (n_344, n_283, n_284);
  not g217 (n_286, n_285);
  nor g218 (n_288, n_280, n_286);
  not g219 (n_289, n_287);
  nor g220 (n_349, n_288, n_289);
  nand g221 (n_348, n_283, n_285);
  nor g222 (n_291, n_221, n_290);
  not g223 (n_292, n_216);
  nor g224 (n_398, n_291, n_292);
  not g225 (n_294, n_221);
  nand g226 (n_397, n_293, n_294);
  not g227 (n_296, n_295);
  nor g228 (n_298, n_290, n_296);
  not g229 (n_299, n_297);
  nor g230 (n_352, n_298, n_299);
  nand g231 (n_355, n_293, n_295);
  nor g232 (n_301, n_233, n_300);
  not g233 (n_302, n_228);
  nor g234 (n_360, n_301, n_302);
  not g235 (n_304, n_233);
  nand g236 (n_359, n_303, n_304);
  not g237 (n_306, n_305);
  nor g238 (n_308, n_300, n_306);
  not g239 (n_309, n_307);
  nor g240 (n_364, n_308, n_309);
  nand g241 (n_363, n_303, n_305);
  not g242 (n_311, n_155);
  nand g243 (n_312, n_310, n_311);
  nand g244 (n_489, n_150, n_312);
  nand g245 (n_313, n_243, n_310);
  nand g246 (n_491, n_240, n_313);
  not g247 (n_315, n_314);
  nand g248 (n_317, n_310, n_315);
  nand g249 (n_494, n_316, n_317);
  not g250 (n_319, n_318);
  nand g251 (n_321, n_310, n_319);
  nand g252 (n_367, n_320, n_321);
  nor g253 (n_323, n_179, n_322);
  not g254 (n_324, n_174);
  nor g255 (n_378, n_323, n_324);
  nor g256 (n_377, n_179, n_325);
  not g257 (n_326, n_263);
  nor g258 (n_327, n_322, n_326);
  not g259 (n_328, n_260);
  nor g260 (n_381, n_327, n_328);
  nor g261 (n_380, n_325, n_326);
  nor g262 (n_331, n_329, n_322);
  not g263 (n_332, n_330);
  nor g264 (n_384, n_331, n_332);
  nor g265 (n_383, n_325, n_329);
  nor g266 (n_335, n_333, n_322);
  not g267 (n_336, n_334);
  nor g268 (n_387, n_335, n_336);
  nor g269 (n_386, n_325, n_333);
  nor g270 (n_338, n_203, n_337);
  not g271 (n_339, n_198);
  nor g272 (n_436, n_338, n_339);
  nor g273 (n_435, n_203, n_340);
  not g274 (n_341, n_283);
  nor g275 (n_342, n_337, n_341);
  not g276 (n_343, n_280);
  nor g277 (n_439, n_342, n_343);
  nor g278 (n_438, n_340, n_341);
  nor g279 (n_346, n_344, n_337);
  not g280 (n_347, n_345);
  nor g281 (n_442, n_346, n_347);
  nor g282 (n_441, n_340, n_344);
  nor g283 (n_350, n_348, n_337);
  not g284 (n_351, n_349);
  nor g285 (n_389, n_350, n_351);
  nor g286 (n_392, n_340, n_348);
  nor g287 (n_353, n_227, n_352);
  not g288 (n_354, n_222);
  nor g289 (n_407, n_353, n_354);
  nor g290 (n_405, n_227, n_355);
  not g291 (n_356, n_303);
  nor g292 (n_357, n_352, n_356);
  not g293 (n_358, n_300);
  nor g294 (n_412, n_357, n_358);
  nor g295 (n_410, n_355, n_356);
  nor g296 (n_361, n_359, n_352);
  not g297 (n_362, n_360);
  nor g298 (n_417, n_361, n_362);
  nor g299 (n_415, n_355, n_359);
  nor g300 (n_365, n_363, n_352);
  not g301 (n_366, n_364);
  nor g302 (n_422, n_365, n_366);
  nor g303 (n_420, n_355, n_363);
  not g304 (n_368, n_167);
  nand g305 (n_369, n_367, n_368);
  nand g306 (n_498, n_162, n_369);
  nand g307 (n_370, n_253, n_367);
  nand g308 (n_500, n_250, n_370);
  not g309 (n_372, n_371);
  nand g310 (n_374, n_367, n_372);
  nand g311 (n_503, n_373, n_374);
  not g312 (n_375, n_325);
  nand g313 (n_376, n_367, n_375);
  nand g314 (n_506, n_322, n_376);
  nand g315 (n_379, n_377, n_367);
  nand g316 (n_509, n_378, n_379);
  nand g317 (n_382, n_380, n_367);
  nand g318 (n_511, n_381, n_382);
  nand g319 (n_385, n_383, n_367);
  nand g320 (n_514, n_384, n_385);
  nand g321 (n_388, n_386, n_367);
  nand g322 (n_425, n_387, n_388);
  nor g323 (n_390, n_215, n_389);
  not g324 (n_391, n_210);
  nor g325 (n_447, n_390, n_391);
  not g326 (n_393, n_215);
  nand g327 (n_445, n_392, n_393);
  not g328 (n_394, n_293);
  nor g329 (n_395, n_389, n_394);
  not g330 (n_396, n_290);
  nor g331 (n_451, n_395, n_396);
  nand g332 (n_449, n_293, n_392);
  nor g333 (n_399, n_397, n_389);
  not g334 (n_400, n_398);
  nor g335 (n_455, n_399, n_400);
  not g336 (n_401, n_397);
  nand g337 (n_453, n_392, n_401);
  nor g338 (n_402, n_355, n_389);
  not g339 (n_403, n_352);
  nor g340 (n_459, n_402, n_403);
  not g341 (n_404, n_355);
  nand g342 (n_457, n_392, n_404);
  not g343 (n_406, n_405);
  nor g344 (n_408, n_389, n_406);
  not g345 (n_409, n_407);
  nor g346 (n_463, n_408, n_409);
  nand g347 (n_461, n_392, n_405);
  not g348 (n_411, n_410);
  nor g349 (n_413, n_389, n_411);
  not g350 (n_414, n_412);
  nor g351 (n_467, n_413, n_414);
  nand g352 (n_465, n_392, n_410);
  not g353 (n_416, n_415);
  nor g354 (n_418, n_389, n_416);
  not g355 (n_419, n_417);
  nor g356 (n_471, n_418, n_419);
  nand g357 (n_469, n_392, n_415);
  not g358 (n_421, n_420);
  nor g359 (n_423, n_389, n_421);
  not g360 (n_424, n_422);
  nor g361 (n_475, n_423, n_424);
  nand g362 (n_473, n_392, n_420);
  not g363 (n_426, n_191);
  nand g364 (n_427, n_425, n_426);
  nand g365 (n_518, n_186, n_427);
  nand g366 (n_428, n_273, n_425);
  nand g367 (n_520, n_270, n_428);
  not g368 (n_430, n_429);
  nand g369 (n_432, n_425, n_430);
  nand g370 (n_523, n_431, n_432);
  not g371 (n_433, n_340);
  nand g372 (n_434, n_425, n_433);
  nand g373 (n_526, n_337, n_434);
  nand g374 (n_437, n_435, n_425);
  nand g375 (n_529, n_436, n_437);
  nand g376 (n_440, n_438, n_425);
  nand g377 (n_531, n_439, n_440);
  nand g378 (n_443, n_441, n_425);
  nand g379 (n_534, n_442, n_443);
  nand g380 (n_444, n_392, n_425);
  nand g381 (n_536, n_389, n_444);
  not g382 (n_446, n_445);
  nand g383 (n_448, n_425, n_446);
  nand g384 (n_539, n_447, n_448);
  not g385 (n_450, n_449);
  nand g386 (n_452, n_425, n_450);
  nand g387 (n_541, n_451, n_452);
  not g388 (n_454, n_453);
  nand g389 (n_456, n_425, n_454);
  nand g390 (n_544, n_455, n_456);
  not g391 (n_458, n_457);
  nand g392 (n_460, n_425, n_458);
  nand g393 (n_547, n_459, n_460);
  not g394 (n_462, n_461);
  nand g395 (n_464, n_425, n_462);
  nand g396 (n_550, n_463, n_464);
  not g397 (n_466, n_465);
  nand g398 (n_468, n_425, n_466);
  nand g399 (n_552, n_467, n_468);
  not g400 (n_470, n_469);
  nand g401 (n_472, n_425, n_470);
  nand g402 (n_555, n_471, n_472);
  not g403 (n_474, n_473);
  nand g404 (n_476, n_425, n_474);
  nand g405 (n_478, n_475, n_476);
  nand g409 (n_482, n_141, n_142);
  xnor g410 (Z[1], n_140, n_482);
  nand g411 (n_483, n_235, n_144);
  xnor g412 (Z[2], n_234, n_483);
  not g413 (n_484, n_145);
  nand g414 (n_486, n_484, n_146);
  xnor g415 (Z[3], n_485, n_486);
  nand g416 (n_487, n_311, n_150);
  xnor g417 (Z[4], n_310, n_487);
  not g418 (n_488, n_151);
  nand g419 (n_490, n_488, n_152);
  xnor g420 (Z[5], n_489, n_490);
  nand g421 (n_492, n_244, n_156);
  xnor g422 (Z[6], n_491, n_492);
  not g423 (n_493, n_157);
  nand g424 (n_495, n_493, n_158);
  xnor g425 (Z[7], n_494, n_495);
  nand g426 (n_496, n_368, n_162);
  xnor g427 (Z[8], n_367, n_496);
  not g428 (n_497, n_163);
  nand g429 (n_499, n_497, n_164);
  xnor g430 (Z[9], n_498, n_499);
  nand g431 (n_501, n_254, n_168);
  xnor g432 (Z[10], n_500, n_501);
  not g433 (n_502, n_169);
  nand g434 (n_504, n_502, n_170);
  xnor g435 (Z[11], n_503, n_504);
  not g436 (n_505, n_179);
  nand g437 (n_507, n_505, n_174);
  xnor g438 (Z[12], n_506, n_507);
  not g439 (n_508, n_175);
  nand g440 (n_510, n_508, n_176);
  xnor g441 (Z[13], n_509, n_510);
  nand g442 (n_512, n_264, n_180);
  xnor g443 (Z[14], n_511, n_512);
  not g444 (n_513, n_181);
  nand g445 (n_515, n_513, n_182);
  xnor g446 (Z[15], n_514, n_515);
  nand g447 (n_516, n_426, n_186);
  xnor g448 (Z[16], n_425, n_516);
  not g449 (n_517, n_187);
  nand g450 (n_519, n_517, n_188);
  xnor g451 (Z[17], n_518, n_519);
  nand g452 (n_521, n_274, n_192);
  xnor g453 (Z[18], n_520, n_521);
  not g454 (n_522, n_193);
  nand g455 (n_524, n_522, n_194);
  xnor g456 (Z[19], n_523, n_524);
  not g457 (n_525, n_203);
  nand g458 (n_527, n_525, n_198);
  xnor g459 (Z[20], n_526, n_527);
  not g460 (n_528, n_199);
  nand g461 (n_530, n_528, n_200);
  xnor g462 (Z[21], n_529, n_530);
  nand g463 (n_532, n_284, n_204);
  xnor g464 (Z[22], n_531, n_532);
  not g465 (n_533, n_205);
  nand g466 (n_535, n_533, n_206);
  xnor g467 (Z[23], n_534, n_535);
  nand g468 (n_537, n_393, n_210);
  xnor g469 (Z[24], n_536, n_537);
  not g470 (n_538, n_211);
  nand g471 (n_540, n_538, n_212);
  xnor g472 (Z[25], n_539, n_540);
  nand g473 (n_542, n_294, n_216);
  xnor g474 (Z[26], n_541, n_542);
  not g475 (n_543, n_217);
  nand g476 (n_545, n_543, n_218);
  xnor g477 (Z[27], n_544, n_545);
  not g478 (n_546, n_227);
  nand g479 (n_548, n_546, n_222);
  xnor g480 (Z[28], n_547, n_548);
  not g481 (n_549, n_223);
  nand g482 (n_551, n_549, n_224);
  xnor g483 (Z[29], n_550, n_551);
  nand g484 (n_553, n_304, n_228);
  xnor g485 (Z[30], n_552, n_553);
  not g486 (n_554, n_229);
  nand g487 (n_556, n_554, n_230);
  xnor g488 (Z[31], n_555, n_556);
  xnor g490 (Z[32], n_478, A[32]);
  not g493 (n_137, A[0]);
  not g494 (Z[0], n_558);
endmodule

module mux_88(ctl, in_0, in_1, in_2, z);
  input [2:0] ctl;
  input in_0, in_1, in_2;
  output z;
  wire [2:0] ctl;
  wire in_0, in_1, in_2;
  wire z;
  CDN_mux3 g1(.sel0 (ctl[2]), .data0 (in_0), .sel1 (ctl[1]), .data1
       (in_1), .sel2 (ctl[0]), .data2 (in_2), .z (z));
endmodule

module bmux_89(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [30:0] in_0, in_1, in_2, in_3;
  output [30:0] z;
  wire [1:0] ctl;
  wire [30:0] in_0, in_1, in_2, in_3;
  wire [30:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[30]), .data1 (in_1[30]),
       .sel1 (ctl[1]), .data2 (in_2[30]), .data3 (in_3[30]), .z
       (z[30]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[29]), .data1 (in_1[29]),
       .sel1 (ctl[1]), .data2 (in_2[29]), .data3 (in_3[29]), .z
       (z[29]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[28]), .data1 (in_1[28]),
       .sel1 (ctl[1]), .data2 (in_2[28]), .data3 (in_3[28]), .z
       (z[28]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[27]), .data1 (in_1[27]),
       .sel1 (ctl[1]), .data2 (in_2[27]), .data3 (in_3[27]), .z
       (z[27]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[26]), .data1 (in_1[26]),
       .sel1 (ctl[1]), .data2 (in_2[26]), .data3 (in_3[26]), .z
       (z[26]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[25]), .data1 (in_1[25]),
       .sel1 (ctl[1]), .data2 (in_2[25]), .data3 (in_3[25]), .z
       (z[25]));
  CDN_bmux4 g7(.sel0 (ctl[0]), .data0 (in_0[24]), .data1 (in_1[24]),
       .sel1 (ctl[1]), .data2 (in_2[24]), .data3 (in_3[24]), .z
       (z[24]));
  CDN_bmux4 g8(.sel0 (ctl[0]), .data0 (in_0[23]), .data1 (in_1[23]),
       .sel1 (ctl[1]), .data2 (in_2[23]), .data3 (in_3[23]), .z
       (z[23]));
  CDN_bmux4 g9(.sel0 (ctl[0]), .data0 (in_0[22]), .data1 (in_1[22]),
       .sel1 (ctl[1]), .data2 (in_2[22]), .data3 (in_3[22]), .z
       (z[22]));
  CDN_bmux4 g10(.sel0 (ctl[0]), .data0 (in_0[21]), .data1 (in_1[21]),
       .sel1 (ctl[1]), .data2 (in_2[21]), .data3 (in_3[21]), .z
       (z[21]));
  CDN_bmux4 g11(.sel0 (ctl[0]), .data0 (in_0[20]), .data1 (in_1[20]),
       .sel1 (ctl[1]), .data2 (in_2[20]), .data3 (in_3[20]), .z
       (z[20]));
  CDN_bmux4 g12(.sel0 (ctl[0]), .data0 (in_0[19]), .data1 (in_1[19]),
       .sel1 (ctl[1]), .data2 (in_2[19]), .data3 (in_3[19]), .z
       (z[19]));
  CDN_bmux4 g13(.sel0 (ctl[0]), .data0 (in_0[18]), .data1 (in_1[18]),
       .sel1 (ctl[1]), .data2 (in_2[18]), .data3 (in_3[18]), .z
       (z[18]));
  CDN_bmux4 g14(.sel0 (ctl[0]), .data0 (in_0[17]), .data1 (in_1[17]),
       .sel1 (ctl[1]), .data2 (in_2[17]), .data3 (in_3[17]), .z
       (z[17]));
  CDN_bmux4 g15(.sel0 (ctl[0]), .data0 (in_0[16]), .data1 (in_1[16]),
       .sel1 (ctl[1]), .data2 (in_2[16]), .data3 (in_3[16]), .z
       (z[16]));
  CDN_bmux4 g16(.sel0 (ctl[0]), .data0 (in_0[15]), .data1 (in_1[15]),
       .sel1 (ctl[1]), .data2 (in_2[15]), .data3 (in_3[15]), .z
       (z[15]));
  CDN_bmux4 g17(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .z
       (z[14]));
  CDN_bmux4 g18(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .z
       (z[13]));
  CDN_bmux4 g19(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .z
       (z[12]));
  CDN_bmux4 g20(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .z
       (z[11]));
  CDN_bmux4 g21(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .z
       (z[10]));
  CDN_bmux4 g22(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .z (z[9]));
  CDN_bmux4 g23(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .z (z[8]));
  CDN_bmux4 g24(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .z (z[7]));
  CDN_bmux4 g25(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .z (z[6]));
  CDN_bmux4 g26(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g27(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g28(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g29(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g30(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g31(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module bmux_90(ctl, in_0, in_1, z);
  input ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_92(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [63:0] in_0, in_1, in_2, in_3;
  output [63:0] z;
  wire [1:0] ctl;
  wire [63:0] in_0, in_1, in_2, in_3;
  wire [63:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[63]), .data1 (in_1[63]),
       .sel1 (ctl[1]), .data2 (in_2[63]), .data3 (in_3[63]), .z
       (z[63]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[62]), .data1 (in_1[62]),
       .sel1 (ctl[1]), .data2 (in_2[62]), .data3 (in_3[62]), .z
       (z[62]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[61]), .data1 (in_1[61]),
       .sel1 (ctl[1]), .data2 (in_2[61]), .data3 (in_3[61]), .z
       (z[61]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[60]), .data1 (in_1[60]),
       .sel1 (ctl[1]), .data2 (in_2[60]), .data3 (in_3[60]), .z
       (z[60]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[59]), .data1 (in_1[59]),
       .sel1 (ctl[1]), .data2 (in_2[59]), .data3 (in_3[59]), .z
       (z[59]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[58]), .data1 (in_1[58]),
       .sel1 (ctl[1]), .data2 (in_2[58]), .data3 (in_3[58]), .z
       (z[58]));
  CDN_bmux4 g7(.sel0 (ctl[0]), .data0 (in_0[57]), .data1 (in_1[57]),
       .sel1 (ctl[1]), .data2 (in_2[57]), .data3 (in_3[57]), .z
       (z[57]));
  CDN_bmux4 g8(.sel0 (ctl[0]), .data0 (in_0[56]), .data1 (in_1[56]),
       .sel1 (ctl[1]), .data2 (in_2[56]), .data3 (in_3[56]), .z
       (z[56]));
  CDN_bmux4 g9(.sel0 (ctl[0]), .data0 (in_0[55]), .data1 (in_1[55]),
       .sel1 (ctl[1]), .data2 (in_2[55]), .data3 (in_3[55]), .z
       (z[55]));
  CDN_bmux4 g10(.sel0 (ctl[0]), .data0 (in_0[54]), .data1 (in_1[54]),
       .sel1 (ctl[1]), .data2 (in_2[54]), .data3 (in_3[54]), .z
       (z[54]));
  CDN_bmux4 g11(.sel0 (ctl[0]), .data0 (in_0[53]), .data1 (in_1[53]),
       .sel1 (ctl[1]), .data2 (in_2[53]), .data3 (in_3[53]), .z
       (z[53]));
  CDN_bmux4 g12(.sel0 (ctl[0]), .data0 (in_0[52]), .data1 (in_1[52]),
       .sel1 (ctl[1]), .data2 (in_2[52]), .data3 (in_3[52]), .z
       (z[52]));
  CDN_bmux4 g13(.sel0 (ctl[0]), .data0 (in_0[51]), .data1 (in_1[51]),
       .sel1 (ctl[1]), .data2 (in_2[51]), .data3 (in_3[51]), .z
       (z[51]));
  CDN_bmux4 g14(.sel0 (ctl[0]), .data0 (in_0[50]), .data1 (in_1[50]),
       .sel1 (ctl[1]), .data2 (in_2[50]), .data3 (in_3[50]), .z
       (z[50]));
  CDN_bmux4 g15(.sel0 (ctl[0]), .data0 (in_0[49]), .data1 (in_1[49]),
       .sel1 (ctl[1]), .data2 (in_2[49]), .data3 (in_3[49]), .z
       (z[49]));
  CDN_bmux4 g16(.sel0 (ctl[0]), .data0 (in_0[48]), .data1 (in_1[48]),
       .sel1 (ctl[1]), .data2 (in_2[48]), .data3 (in_3[48]), .z
       (z[48]));
  CDN_bmux4 g17(.sel0 (ctl[0]), .data0 (in_0[47]), .data1 (in_1[47]),
       .sel1 (ctl[1]), .data2 (in_2[47]), .data3 (in_3[47]), .z
       (z[47]));
  CDN_bmux4 g18(.sel0 (ctl[0]), .data0 (in_0[46]), .data1 (in_1[46]),
       .sel1 (ctl[1]), .data2 (in_2[46]), .data3 (in_3[46]), .z
       (z[46]));
  CDN_bmux4 g19(.sel0 (ctl[0]), .data0 (in_0[45]), .data1 (in_1[45]),
       .sel1 (ctl[1]), .data2 (in_2[45]), .data3 (in_3[45]), .z
       (z[45]));
  CDN_bmux4 g20(.sel0 (ctl[0]), .data0 (in_0[44]), .data1 (in_1[44]),
       .sel1 (ctl[1]), .data2 (in_2[44]), .data3 (in_3[44]), .z
       (z[44]));
  CDN_bmux4 g21(.sel0 (ctl[0]), .data0 (in_0[43]), .data1 (in_1[43]),
       .sel1 (ctl[1]), .data2 (in_2[43]), .data3 (in_3[43]), .z
       (z[43]));
  CDN_bmux4 g22(.sel0 (ctl[0]), .data0 (in_0[42]), .data1 (in_1[42]),
       .sel1 (ctl[1]), .data2 (in_2[42]), .data3 (in_3[42]), .z
       (z[42]));
  CDN_bmux4 g23(.sel0 (ctl[0]), .data0 (in_0[41]), .data1 (in_1[41]),
       .sel1 (ctl[1]), .data2 (in_2[41]), .data3 (in_3[41]), .z
       (z[41]));
  CDN_bmux4 g24(.sel0 (ctl[0]), .data0 (in_0[40]), .data1 (in_1[40]),
       .sel1 (ctl[1]), .data2 (in_2[40]), .data3 (in_3[40]), .z
       (z[40]));
  CDN_bmux4 g25(.sel0 (ctl[0]), .data0 (in_0[39]), .data1 (in_1[39]),
       .sel1 (ctl[1]), .data2 (in_2[39]), .data3 (in_3[39]), .z
       (z[39]));
  CDN_bmux4 g26(.sel0 (ctl[0]), .data0 (in_0[38]), .data1 (in_1[38]),
       .sel1 (ctl[1]), .data2 (in_2[38]), .data3 (in_3[38]), .z
       (z[38]));
  CDN_bmux4 g27(.sel0 (ctl[0]), .data0 (in_0[37]), .data1 (in_1[37]),
       .sel1 (ctl[1]), .data2 (in_2[37]), .data3 (in_3[37]), .z
       (z[37]));
  CDN_bmux4 g28(.sel0 (ctl[0]), .data0 (in_0[36]), .data1 (in_1[36]),
       .sel1 (ctl[1]), .data2 (in_2[36]), .data3 (in_3[36]), .z
       (z[36]));
  CDN_bmux4 g29(.sel0 (ctl[0]), .data0 (in_0[35]), .data1 (in_1[35]),
       .sel1 (ctl[1]), .data2 (in_2[35]), .data3 (in_3[35]), .z
       (z[35]));
  CDN_bmux4 g30(.sel0 (ctl[0]), .data0 (in_0[34]), .data1 (in_1[34]),
       .sel1 (ctl[1]), .data2 (in_2[34]), .data3 (in_3[34]), .z
       (z[34]));
  CDN_bmux4 g31(.sel0 (ctl[0]), .data0 (in_0[33]), .data1 (in_1[33]),
       .sel1 (ctl[1]), .data2 (in_2[33]), .data3 (in_3[33]), .z
       (z[33]));
  CDN_bmux4 g32(.sel0 (ctl[0]), .data0 (in_0[32]), .data1 (in_1[32]),
       .sel1 (ctl[1]), .data2 (in_2[32]), .data3 (in_3[32]), .z
       (z[32]));
  CDN_bmux4 g33(.sel0 (ctl[0]), .data0 (in_0[31]), .data1 (in_1[31]),
       .sel1 (ctl[1]), .data2 (in_2[31]), .data3 (in_3[31]), .z
       (z[31]));
  CDN_bmux4 g34(.sel0 (ctl[0]), .data0 (in_0[30]), .data1 (in_1[30]),
       .sel1 (ctl[1]), .data2 (in_2[30]), .data3 (in_3[30]), .z
       (z[30]));
  CDN_bmux4 g35(.sel0 (ctl[0]), .data0 (in_0[29]), .data1 (in_1[29]),
       .sel1 (ctl[1]), .data2 (in_2[29]), .data3 (in_3[29]), .z
       (z[29]));
  CDN_bmux4 g36(.sel0 (ctl[0]), .data0 (in_0[28]), .data1 (in_1[28]),
       .sel1 (ctl[1]), .data2 (in_2[28]), .data3 (in_3[28]), .z
       (z[28]));
  CDN_bmux4 g37(.sel0 (ctl[0]), .data0 (in_0[27]), .data1 (in_1[27]),
       .sel1 (ctl[1]), .data2 (in_2[27]), .data3 (in_3[27]), .z
       (z[27]));
  CDN_bmux4 g38(.sel0 (ctl[0]), .data0 (in_0[26]), .data1 (in_1[26]),
       .sel1 (ctl[1]), .data2 (in_2[26]), .data3 (in_3[26]), .z
       (z[26]));
  CDN_bmux4 g39(.sel0 (ctl[0]), .data0 (in_0[25]), .data1 (in_1[25]),
       .sel1 (ctl[1]), .data2 (in_2[25]), .data3 (in_3[25]), .z
       (z[25]));
  CDN_bmux4 g40(.sel0 (ctl[0]), .data0 (in_0[24]), .data1 (in_1[24]),
       .sel1 (ctl[1]), .data2 (in_2[24]), .data3 (in_3[24]), .z
       (z[24]));
  CDN_bmux4 g41(.sel0 (ctl[0]), .data0 (in_0[23]), .data1 (in_1[23]),
       .sel1 (ctl[1]), .data2 (in_2[23]), .data3 (in_3[23]), .z
       (z[23]));
  CDN_bmux4 g42(.sel0 (ctl[0]), .data0 (in_0[22]), .data1 (in_1[22]),
       .sel1 (ctl[1]), .data2 (in_2[22]), .data3 (in_3[22]), .z
       (z[22]));
  CDN_bmux4 g43(.sel0 (ctl[0]), .data0 (in_0[21]), .data1 (in_1[21]),
       .sel1 (ctl[1]), .data2 (in_2[21]), .data3 (in_3[21]), .z
       (z[21]));
  CDN_bmux4 g44(.sel0 (ctl[0]), .data0 (in_0[20]), .data1 (in_1[20]),
       .sel1 (ctl[1]), .data2 (in_2[20]), .data3 (in_3[20]), .z
       (z[20]));
  CDN_bmux4 g45(.sel0 (ctl[0]), .data0 (in_0[19]), .data1 (in_1[19]),
       .sel1 (ctl[1]), .data2 (in_2[19]), .data3 (in_3[19]), .z
       (z[19]));
  CDN_bmux4 g46(.sel0 (ctl[0]), .data0 (in_0[18]), .data1 (in_1[18]),
       .sel1 (ctl[1]), .data2 (in_2[18]), .data3 (in_3[18]), .z
       (z[18]));
  CDN_bmux4 g47(.sel0 (ctl[0]), .data0 (in_0[17]), .data1 (in_1[17]),
       .sel1 (ctl[1]), .data2 (in_2[17]), .data3 (in_3[17]), .z
       (z[17]));
  CDN_bmux4 g48(.sel0 (ctl[0]), .data0 (in_0[16]), .data1 (in_1[16]),
       .sel1 (ctl[1]), .data2 (in_2[16]), .data3 (in_3[16]), .z
       (z[16]));
  CDN_bmux4 g49(.sel0 (ctl[0]), .data0 (in_0[15]), .data1 (in_1[15]),
       .sel1 (ctl[1]), .data2 (in_2[15]), .data3 (in_3[15]), .z
       (z[15]));
  CDN_bmux4 g50(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .z
       (z[14]));
  CDN_bmux4 g51(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .z
       (z[13]));
  CDN_bmux4 g52(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .z
       (z[12]));
  CDN_bmux4 g53(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .z
       (z[11]));
  CDN_bmux4 g54(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .z
       (z[10]));
  CDN_bmux4 g55(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .z (z[9]));
  CDN_bmux4 g56(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .z (z[8]));
  CDN_bmux4 g57(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .z (z[7]));
  CDN_bmux4 g58(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .z (z[6]));
  CDN_bmux4 g59(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g60(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g61(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g62(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g63(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g64(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module bmux_93(ctl, in_0, in_1, z);
  input ctl;
  input [63:0] in_0, in_1;
  output [63:0] z;
  wire ctl;
  wire [63:0] in_0, in_1;
  wire [63:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[63]), .data1 (in_1[63]), .z
       (z[63]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[62]), .data1 (in_1[62]), .z
       (z[62]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[61]), .data1 (in_1[61]), .z
       (z[61]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[60]), .data1 (in_1[60]), .z
       (z[60]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[59]), .data1 (in_1[59]), .z
       (z[59]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[58]), .data1 (in_1[58]), .z
       (z[58]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[57]), .data1 (in_1[57]), .z
       (z[57]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[56]), .data1 (in_1[56]), .z
       (z[56]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[55]), .data1 (in_1[55]), .z
       (z[55]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[54]), .data1 (in_1[54]), .z
       (z[54]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[53]), .data1 (in_1[53]), .z
       (z[53]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[52]), .data1 (in_1[52]), .z
       (z[52]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[51]), .data1 (in_1[51]), .z
       (z[51]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[50]), .data1 (in_1[50]), .z
       (z[50]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[49]), .data1 (in_1[49]), .z
       (z[49]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[48]), .data1 (in_1[48]), .z
       (z[48]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[47]), .data1 (in_1[47]), .z
       (z[47]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[46]), .data1 (in_1[46]), .z
       (z[46]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[45]), .data1 (in_1[45]), .z
       (z[45]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[44]), .data1 (in_1[44]), .z
       (z[44]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[43]), .data1 (in_1[43]), .z
       (z[43]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[42]), .data1 (in_1[42]), .z
       (z[42]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[41]), .data1 (in_1[41]), .z
       (z[41]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[40]), .data1 (in_1[40]), .z
       (z[40]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[39]), .data1 (in_1[39]), .z
       (z[39]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[38]), .data1 (in_1[38]), .z
       (z[38]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[37]), .data1 (in_1[37]), .z
       (z[37]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[36]), .data1 (in_1[36]), .z
       (z[36]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[35]), .data1 (in_1[35]), .z
       (z[35]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[34]), .data1 (in_1[34]), .z
       (z[34]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[33]), .data1 (in_1[33]), .z
       (z[33]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[32]), .data1 (in_1[32]), .z
       (z[32]));
  CDN_bmux2 g33(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g34(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g35(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g36(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g37(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g38(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g39(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g40(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g41(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g42(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g43(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g44(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g45(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g46(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g47(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g48(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g49(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g50(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g51(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g52(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g53(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g54(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g55(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g56(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g57(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g58(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g59(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g60(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g61(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g62(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g63(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g64(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_94(ctl, in_0, in_1, z);
  input ctl;
  input [5:0] in_0, in_1;
  output [5:0] z;
  wire ctl;
  wire [5:0] in_0, in_1;
  wire [5:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module divider_dp_OPSIZE32(CLK, rst_n, operand1, operand2, div,
     remainder, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
     load_R_cnt, sel_R_cnt, A_majeq_B, z_cnt);
  input CLK, rst_n, load_R_A, load_R_B, load_R_res, load_R_cnt,
       sel_R_cnt;
  input [31:0] operand1, operand2;
  input [1:0] sel_R_A, sel_R_res;
  output [31:0] div, remainder;
  output A_majeq_B, z_cnt;
  wire CLK, rst_n, load_R_A, load_R_B, load_R_res, load_R_cnt,
       sel_R_cnt;
  wire [31:0] operand1, operand2;
  wire [1:0] sel_R_A, sel_R_res;
  wire [31:0] div, remainder;
  wire A_majeq_B, z_cnt;
  wire [5:0] R_cnt;
  wire [5:0] adder2_out;
  wire [63:0] R_A;
  wire [31:0] R_B;
  wire [32:0] adder1_out;
  wire [31:0] in_R_res;
  wire [63:0] in_R_A;
  wire [5:0] in_R_cnt;
  wire UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6,
       UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, UNCONNECTED10;
  wire UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14,
       UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18;
  wire UNCONNECTED19, UNCONNECTED20, UNCONNECTED21, UNCONNECTED22,
       UNCONNECTED23, UNCONNECTED24, UNCONNECTED25, UNCONNECTED26;
  wire UNCONNECTED27, UNCONNECTED28, UNCONNECTED29, UNCONNECTED30,
       UNCONNECTED31, UNCONNECTED32, UNCONNECTED33, UNCONNECTED34;
  wire UNCONNECTED35, UNCONNECTED36, UNCONNECTED37, UNCONNECTED38,
       UNCONNECTED39, UNCONNECTED40, UNCONNECTED41, UNCONNECTED42;
  wire UNCONNECTED43, UNCONNECTED44, UNCONNECTED45, UNCONNECTED46,
       UNCONNECTED47, UNCONNECTED48, UNCONNECTED49, UNCONNECTED50;
  wire UNCONNECTED51, UNCONNECTED52, UNCONNECTED53, UNCONNECTED54,
       UNCONNECTED55, UNCONNECTED56, UNCONNECTED57, UNCONNECTED58;
  wire UNCONNECTED59, UNCONNECTED60, UNCONNECTED61, UNCONNECTED62,
       UNCONNECTED63, UNCONNECTED64, UNCONNECTED65, UNCONNECTED66;
  wire UNCONNECTED67, UNCONNECTED68, UNCONNECTED69, UNCONNECTED70,
       UNCONNECTED71, UNCONNECTED72, UNCONNECTED73, UNCONNECTED74;
  wire UNCONNECTED75, UNCONNECTED76, UNCONNECTED77, UNCONNECTED78,
       UNCONNECTED79, UNCONNECTED80, UNCONNECTED81, UNCONNECTED82;
  wire UNCONNECTED83, UNCONNECTED84, UNCONNECTED85, UNCONNECTED86,
       UNCONNECTED87, UNCONNECTED88, UNCONNECTED89, UNCONNECTED90;
  wire UNCONNECTED91, UNCONNECTED92, UNCONNECTED93, UNCONNECTED94,
       UNCONNECTED95, UNCONNECTED96, UNCONNECTED97, UNCONNECTED98;
  wire UNCONNECTED99, UNCONNECTED100, UNCONNECTED101, UNCONNECTED102,
       UNCONNECTED103, UNCONNECTED104, UNCONNECTED105, UNCONNECTED106;
  wire UNCONNECTED107, UNCONNECTED108, UNCONNECTED109, UNCONNECTED110,
       UNCONNECTED111, UNCONNECTED112, UNCONNECTED113, UNCONNECTED114;
  wire UNCONNECTED115, UNCONNECTED116, UNCONNECTED117, UNCONNECTED118,
       UNCONNECTED119, UNCONNECTED120, UNCONNECTED121, UNCONNECTED122;
  wire UNCONNECTED123, UNCONNECTED124, UNCONNECTED125, UNCONNECTED126,
       UNCONNECTED127, UNCONNECTED128, UNCONNECTED129, UNCONNECTED130;
  wire UNCONNECTED131, UNCONNECTED132, UNCONNECTED133, UNCONNECTED134,
       UNCONNECTED135, UNCONNECTED136, n_5, n_222;
  wire n_226, n_227, n_298, n_299, n_435, n_436, n_437, n_438;
  sub_unsigned sub_123_52(.A (R_cnt), .B (1'b1), .Z (adder2_out));
  sub_unsigned_79 sub_121_57(.A ({1'b0, remainder[30:0], R_A[31]}), .B
       (R_B), .Z (adder1_out));
  mux_88 mux_in_R_res_112_10(.ctl ({n_226, n_227, sel_R_res[1]}), .in_0
       (1'b0), .in_1 (1'b1), .in_2 (1'b0), .z (in_R_res[0]));
  bmux_89 mux_in_R_res_112_7(.ctl (sel_R_res), .in_0
       (31'b0000000000000000000000000000000), .in_1 (div[30:0]), .in_2
       (div[30:0]), .in_3 (div[30:0]), .z (in_R_res[31:1]));
  bmux_90 mux_R_res_83_18(.ctl (n_222), .in_0
       (32'b00000000000000000000000000000000), .in_1
       (32'b00000000000000000000000000000000), .z ({UNCONNECTED34,
       UNCONNECTED33, UNCONNECTED32, UNCONNECTED31, UNCONNECTED30,
       UNCONNECTED29, UNCONNECTED28, UNCONNECTED27, UNCONNECTED26,
       UNCONNECTED25, UNCONNECTED24, UNCONNECTED23, UNCONNECTED22,
       UNCONNECTED21, UNCONNECTED20, UNCONNECTED19, UNCONNECTED18,
       UNCONNECTED17, UNCONNECTED16, UNCONNECTED15, UNCONNECTED14,
       UNCONNECTED13, UNCONNECTED12, UNCONNECTED11, UNCONNECTED10,
       UNCONNECTED9, UNCONNECTED8, UNCONNECTED7, UNCONNECTED6,
       UNCONNECTED5, UNCONNECTED4, UNCONNECTED3}));
  bmux_90 mux_R_B_83_18(.ctl (n_222), .in_0
       (32'b00000000000000000000000000000000), .in_1
       (32'b00000000000000000000000000000000), .z ({UNCONNECTED66,
       UNCONNECTED65, UNCONNECTED64, UNCONNECTED63, UNCONNECTED62,
       UNCONNECTED61, UNCONNECTED60, UNCONNECTED59, UNCONNECTED58,
       UNCONNECTED57, UNCONNECTED56, UNCONNECTED55, UNCONNECTED54,
       UNCONNECTED53, UNCONNECTED52, UNCONNECTED51, UNCONNECTED50,
       UNCONNECTED49, UNCONNECTED48, UNCONNECTED47, UNCONNECTED46,
       UNCONNECTED45, UNCONNECTED44, UNCONNECTED43, UNCONNECTED42,
       UNCONNECTED41, UNCONNECTED40, UNCONNECTED39, UNCONNECTED38,
       UNCONNECTED37, UNCONNECTED36, UNCONNECTED35}));
  bmux_92 mux_in_R_A_104_10(.ctl (sel_R_A), .in_0
       ({32'b00000000000000000000000000000000, operand1}), .in_1
       ({adder1_out[31:0], R_A[30:0], 1'b0}), .in_2 ({remainder[30:0],
       R_A[31:0], 1'b0}), .in_3 ({remainder[30:0], R_A[31:0], 1'b0}),
       .z (in_R_A));
  bmux_93 mux_R_A_83_18(.ctl (n_222), .in_0
       (64'b0000000000000000000000000000000000000000000000000000000000000000),
       .in_1
       (64'b0000000000000000000000000000000000000000000000000000000000000000),
       .z ({UNCONNECTED130, UNCONNECTED129, UNCONNECTED128,
       UNCONNECTED127, UNCONNECTED126, UNCONNECTED125, UNCONNECTED124,
       UNCONNECTED123, UNCONNECTED122, UNCONNECTED121, UNCONNECTED120,
       UNCONNECTED119, UNCONNECTED118, UNCONNECTED117, UNCONNECTED116,
       UNCONNECTED115, UNCONNECTED114, UNCONNECTED113, UNCONNECTED112,
       UNCONNECTED111, UNCONNECTED110, UNCONNECTED109, UNCONNECTED108,
       UNCONNECTED107, UNCONNECTED106, UNCONNECTED105, UNCONNECTED104,
       UNCONNECTED103, UNCONNECTED102, UNCONNECTED101, UNCONNECTED100,
       UNCONNECTED99, UNCONNECTED98, UNCONNECTED97, UNCONNECTED96,
       UNCONNECTED95, UNCONNECTED94, UNCONNECTED93, UNCONNECTED92,
       UNCONNECTED91, UNCONNECTED90, UNCONNECTED89, UNCONNECTED88,
       UNCONNECTED87, UNCONNECTED86, UNCONNECTED85, UNCONNECTED84,
       UNCONNECTED83, UNCONNECTED82, UNCONNECTED81, UNCONNECTED80,
       UNCONNECTED79, UNCONNECTED78, UNCONNECTED77, UNCONNECTED76,
       UNCONNECTED75, UNCONNECTED74, UNCONNECTED73, UNCONNECTED72,
       UNCONNECTED71, UNCONNECTED70, UNCONNECTED69, UNCONNECTED68,
       UNCONNECTED67}));
  bmux_94 mux_in_R_cnt_124_10(.ctl (sel_R_cnt), .in_0 (6'b011110),
       .in_1 (adder2_out), .z (in_R_cnt));
  bmux_94 mux_R_cnt_83_18(.ctl (n_222), .in_0 (6'b000000), .in_1
       (6'b000000), .z ({UNCONNECTED136, UNCONNECTED135,
       UNCONNECTED134, UNCONNECTED133, UNCONNECTED132,
       UNCONNECTED131}));
  bmux mux_z_cnt_130_29(.ctl (n_298), .in_0 (1'b0), .in_1 (1'b1), .z
       (z_cnt));
  bmux mux_A_majeq_B_132_55(.ctl (n_299), .in_0 (1'b0), .in_1 (1'b1),
       .z (A_majeq_B));
  CDN_flop \R_cnt_reg[0] (.clk (CLK), .d (in_R_cnt[0]), .sena
       (load_R_cnt), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[0]));
  CDN_flop \R_cnt_reg[1] (.clk (CLK), .d (in_R_cnt[1]), .sena
       (load_R_cnt), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[1]));
  CDN_flop \R_cnt_reg[2] (.clk (CLK), .d (in_R_cnt[2]), .sena
       (load_R_cnt), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[2]));
  CDN_flop \R_cnt_reg[3] (.clk (CLK), .d (in_R_cnt[3]), .sena
       (load_R_cnt), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[3]));
  CDN_flop \R_cnt_reg[4] (.clk (CLK), .d (in_R_cnt[4]), .sena
       (load_R_cnt), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[4]));
  CDN_flop \R_cnt_reg[5] (.clk (CLK), .d (in_R_cnt[5]), .sena
       (load_R_cnt), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_cnt[5]));
  CDN_flop \R_A_reg[0] (.clk (CLK), .d (in_R_A[0]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[0]));
  CDN_flop \R_A_reg[1] (.clk (CLK), .d (in_R_A[1]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[1]));
  CDN_flop \R_A_reg[2] (.clk (CLK), .d (in_R_A[2]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[2]));
  CDN_flop \R_A_reg[3] (.clk (CLK), .d (in_R_A[3]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[3]));
  CDN_flop \R_A_reg[4] (.clk (CLK), .d (in_R_A[4]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[4]));
  CDN_flop \R_A_reg[5] (.clk (CLK), .d (in_R_A[5]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[5]));
  CDN_flop \R_A_reg[6] (.clk (CLK), .d (in_R_A[6]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[6]));
  CDN_flop \R_A_reg[7] (.clk (CLK), .d (in_R_A[7]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[7]));
  CDN_flop \R_A_reg[8] (.clk (CLK), .d (in_R_A[8]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[8]));
  CDN_flop \R_A_reg[9] (.clk (CLK), .d (in_R_A[9]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[9]));
  CDN_flop \R_A_reg[10] (.clk (CLK), .d (in_R_A[10]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[10]));
  CDN_flop \R_A_reg[11] (.clk (CLK), .d (in_R_A[11]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[11]));
  CDN_flop \R_A_reg[12] (.clk (CLK), .d (in_R_A[12]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[12]));
  CDN_flop \R_A_reg[13] (.clk (CLK), .d (in_R_A[13]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[13]));
  CDN_flop \R_A_reg[14] (.clk (CLK), .d (in_R_A[14]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[14]));
  CDN_flop \R_A_reg[15] (.clk (CLK), .d (in_R_A[15]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[15]));
  CDN_flop \R_A_reg[16] (.clk (CLK), .d (in_R_A[16]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[16]));
  CDN_flop \R_A_reg[17] (.clk (CLK), .d (in_R_A[17]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[17]));
  CDN_flop \R_A_reg[18] (.clk (CLK), .d (in_R_A[18]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[18]));
  CDN_flop \R_A_reg[19] (.clk (CLK), .d (in_R_A[19]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[19]));
  CDN_flop \R_A_reg[20] (.clk (CLK), .d (in_R_A[20]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[20]));
  CDN_flop \R_A_reg[21] (.clk (CLK), .d (in_R_A[21]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[21]));
  CDN_flop \R_A_reg[22] (.clk (CLK), .d (in_R_A[22]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[22]));
  CDN_flop \R_A_reg[23] (.clk (CLK), .d (in_R_A[23]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[23]));
  CDN_flop \R_A_reg[24] (.clk (CLK), .d (in_R_A[24]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[24]));
  CDN_flop \R_A_reg[25] (.clk (CLK), .d (in_R_A[25]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[25]));
  CDN_flop \R_A_reg[26] (.clk (CLK), .d (in_R_A[26]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[26]));
  CDN_flop \R_A_reg[27] (.clk (CLK), .d (in_R_A[27]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[27]));
  CDN_flop \R_A_reg[28] (.clk (CLK), .d (in_R_A[28]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[28]));
  CDN_flop \R_A_reg[29] (.clk (CLK), .d (in_R_A[29]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[29]));
  CDN_flop \R_A_reg[30] (.clk (CLK), .d (in_R_A[30]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[30]));
  CDN_flop \R_A_reg[31] (.clk (CLK), .d (in_R_A[31]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[31]));
  CDN_flop \R_A_reg[32] (.clk (CLK), .d (in_R_A[32]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[0]));
  CDN_flop \R_A_reg[33] (.clk (CLK), .d (in_R_A[33]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[1]));
  CDN_flop \R_A_reg[34] (.clk (CLK), .d (in_R_A[34]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[2]));
  CDN_flop \R_A_reg[35] (.clk (CLK), .d (in_R_A[35]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[3]));
  CDN_flop \R_A_reg[36] (.clk (CLK), .d (in_R_A[36]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[4]));
  CDN_flop \R_A_reg[37] (.clk (CLK), .d (in_R_A[37]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[5]));
  CDN_flop \R_A_reg[38] (.clk (CLK), .d (in_R_A[38]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[6]));
  CDN_flop \R_A_reg[39] (.clk (CLK), .d (in_R_A[39]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[7]));
  CDN_flop \R_A_reg[40] (.clk (CLK), .d (in_R_A[40]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[8]));
  CDN_flop \R_A_reg[41] (.clk (CLK), .d (in_R_A[41]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[9]));
  CDN_flop \R_A_reg[42] (.clk (CLK), .d (in_R_A[42]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[10]));
  CDN_flop \R_A_reg[43] (.clk (CLK), .d (in_R_A[43]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[11]));
  CDN_flop \R_A_reg[44] (.clk (CLK), .d (in_R_A[44]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[12]));
  CDN_flop \R_A_reg[45] (.clk (CLK), .d (in_R_A[45]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[13]));
  CDN_flop \R_A_reg[46] (.clk (CLK), .d (in_R_A[46]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[14]));
  CDN_flop \R_A_reg[47] (.clk (CLK), .d (in_R_A[47]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[15]));
  CDN_flop \R_A_reg[48] (.clk (CLK), .d (in_R_A[48]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[16]));
  CDN_flop \R_A_reg[49] (.clk (CLK), .d (in_R_A[49]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[17]));
  CDN_flop \R_A_reg[50] (.clk (CLK), .d (in_R_A[50]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[18]));
  CDN_flop \R_A_reg[51] (.clk (CLK), .d (in_R_A[51]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[19]));
  CDN_flop \R_A_reg[52] (.clk (CLK), .d (in_R_A[52]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[20]));
  CDN_flop \R_A_reg[53] (.clk (CLK), .d (in_R_A[53]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[21]));
  CDN_flop \R_A_reg[54] (.clk (CLK), .d (in_R_A[54]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[22]));
  CDN_flop \R_A_reg[55] (.clk (CLK), .d (in_R_A[55]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[23]));
  CDN_flop \R_A_reg[56] (.clk (CLK), .d (in_R_A[56]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[24]));
  CDN_flop \R_A_reg[57] (.clk (CLK), .d (in_R_A[57]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[25]));
  CDN_flop \R_A_reg[58] (.clk (CLK), .d (in_R_A[58]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[26]));
  CDN_flop \R_A_reg[59] (.clk (CLK), .d (in_R_A[59]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[27]));
  CDN_flop \R_A_reg[60] (.clk (CLK), .d (in_R_A[60]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[28]));
  CDN_flop \R_A_reg[61] (.clk (CLK), .d (in_R_A[61]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[29]));
  CDN_flop \R_A_reg[62] (.clk (CLK), .d (in_R_A[62]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[30]));
  CDN_flop \R_A_reg[63] (.clk (CLK), .d (in_R_A[63]), .sena (load_R_A),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (remainder[31]));
  CDN_flop \R_B_reg[0] (.clk (CLK), .d (operand2[0]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[0]));
  CDN_flop \R_B_reg[1] (.clk (CLK), .d (operand2[1]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[1]));
  CDN_flop \R_B_reg[2] (.clk (CLK), .d (operand2[2]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[2]));
  CDN_flop \R_B_reg[3] (.clk (CLK), .d (operand2[3]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[3]));
  CDN_flop \R_B_reg[4] (.clk (CLK), .d (operand2[4]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[4]));
  CDN_flop \R_B_reg[5] (.clk (CLK), .d (operand2[5]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[5]));
  CDN_flop \R_B_reg[6] (.clk (CLK), .d (operand2[6]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[6]));
  CDN_flop \R_B_reg[7] (.clk (CLK), .d (operand2[7]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[7]));
  CDN_flop \R_B_reg[8] (.clk (CLK), .d (operand2[8]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[8]));
  CDN_flop \R_B_reg[9] (.clk (CLK), .d (operand2[9]), .sena (load_R_B),
       .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[9]));
  CDN_flop \R_B_reg[10] (.clk (CLK), .d (operand2[10]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[10]));
  CDN_flop \R_B_reg[11] (.clk (CLK), .d (operand2[11]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[11]));
  CDN_flop \R_B_reg[12] (.clk (CLK), .d (operand2[12]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[12]));
  CDN_flop \R_B_reg[13] (.clk (CLK), .d (operand2[13]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[13]));
  CDN_flop \R_B_reg[14] (.clk (CLK), .d (operand2[14]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[14]));
  CDN_flop \R_B_reg[15] (.clk (CLK), .d (operand2[15]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[15]));
  CDN_flop \R_B_reg[16] (.clk (CLK), .d (operand2[16]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[16]));
  CDN_flop \R_B_reg[17] (.clk (CLK), .d (operand2[17]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[17]));
  CDN_flop \R_B_reg[18] (.clk (CLK), .d (operand2[18]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[18]));
  CDN_flop \R_B_reg[19] (.clk (CLK), .d (operand2[19]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[19]));
  CDN_flop \R_B_reg[20] (.clk (CLK), .d (operand2[20]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[20]));
  CDN_flop \R_B_reg[21] (.clk (CLK), .d (operand2[21]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[21]));
  CDN_flop \R_B_reg[22] (.clk (CLK), .d (operand2[22]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[22]));
  CDN_flop \R_B_reg[23] (.clk (CLK), .d (operand2[23]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[23]));
  CDN_flop \R_B_reg[24] (.clk (CLK), .d (operand2[24]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[24]));
  CDN_flop \R_B_reg[25] (.clk (CLK), .d (operand2[25]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[25]));
  CDN_flop \R_B_reg[26] (.clk (CLK), .d (operand2[26]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[26]));
  CDN_flop \R_B_reg[27] (.clk (CLK), .d (operand2[27]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[27]));
  CDN_flop \R_B_reg[28] (.clk (CLK), .d (operand2[28]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[28]));
  CDN_flop \R_B_reg[29] (.clk (CLK), .d (operand2[29]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[29]));
  CDN_flop \R_B_reg[30] (.clk (CLK), .d (operand2[30]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[30]));
  CDN_flop \R_B_reg[31] (.clk (CLK), .d (operand2[31]), .sena
       (load_R_B), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (R_B[31]));
  CDN_flop \R_res_reg[0] (.clk (CLK), .d (in_R_res[0]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[0]));
  CDN_flop \R_res_reg[1] (.clk (CLK), .d (in_R_res[1]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[1]));
  CDN_flop \R_res_reg[2] (.clk (CLK), .d (in_R_res[2]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[2]));
  CDN_flop \R_res_reg[3] (.clk (CLK), .d (in_R_res[3]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[3]));
  CDN_flop \R_res_reg[4] (.clk (CLK), .d (in_R_res[4]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[4]));
  CDN_flop \R_res_reg[5] (.clk (CLK), .d (in_R_res[5]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[5]));
  CDN_flop \R_res_reg[6] (.clk (CLK), .d (in_R_res[6]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[6]));
  CDN_flop \R_res_reg[7] (.clk (CLK), .d (in_R_res[7]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[7]));
  CDN_flop \R_res_reg[8] (.clk (CLK), .d (in_R_res[8]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[8]));
  CDN_flop \R_res_reg[9] (.clk (CLK), .d (in_R_res[9]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[9]));
  CDN_flop \R_res_reg[10] (.clk (CLK), .d (in_R_res[10]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[10]));
  CDN_flop \R_res_reg[11] (.clk (CLK), .d (in_R_res[11]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[11]));
  CDN_flop \R_res_reg[12] (.clk (CLK), .d (in_R_res[12]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[12]));
  CDN_flop \R_res_reg[13] (.clk (CLK), .d (in_R_res[13]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[13]));
  CDN_flop \R_res_reg[14] (.clk (CLK), .d (in_R_res[14]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[14]));
  CDN_flop \R_res_reg[15] (.clk (CLK), .d (in_R_res[15]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[15]));
  CDN_flop \R_res_reg[16] (.clk (CLK), .d (in_R_res[16]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[16]));
  CDN_flop \R_res_reg[17] (.clk (CLK), .d (in_R_res[17]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[17]));
  CDN_flop \R_res_reg[18] (.clk (CLK), .d (in_R_res[18]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[18]));
  CDN_flop \R_res_reg[19] (.clk (CLK), .d (in_R_res[19]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[19]));
  CDN_flop \R_res_reg[20] (.clk (CLK), .d (in_R_res[20]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[20]));
  CDN_flop \R_res_reg[21] (.clk (CLK), .d (in_R_res[21]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[21]));
  CDN_flop \R_res_reg[22] (.clk (CLK), .d (in_R_res[22]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[22]));
  CDN_flop \R_res_reg[23] (.clk (CLK), .d (in_R_res[23]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[23]));
  CDN_flop \R_res_reg[24] (.clk (CLK), .d (in_R_res[24]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[24]));
  CDN_flop \R_res_reg[25] (.clk (CLK), .d (in_R_res[25]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[25]));
  CDN_flop \R_res_reg[26] (.clk (CLK), .d (in_R_res[26]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[26]));
  CDN_flop \R_res_reg[27] (.clk (CLK), .d (in_R_res[27]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[27]));
  CDN_flop \R_res_reg[28] (.clk (CLK), .d (in_R_res[28]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[28]));
  CDN_flop \R_res_reg[29] (.clk (CLK), .d (in_R_res[29]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[29]));
  CDN_flop \R_res_reg[30] (.clk (CLK), .d (in_R_res[30]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[30]));
  CDN_flop \R_res_reg[31] (.clk (CLK), .d (in_R_res[31]), .sena
       (load_R_res), .aclr (n_222), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (div[31]));
  nor g149 (n_437, R_cnt[5], R_cnt[4], R_cnt[3], R_cnt[2]);
  not g150 (n_435, R_cnt[1]);
  nand g151 (n_438, n_435, n_436, n_437);
  not g152 (n_298, n_438);
  not g153 (n_222, rst_n);
  not g154 (n_436, R_cnt[0]);
  not g155 (n_299, adder1_out[32]);
  nor g1 (n_226, sel_R_res[0], sel_R_res[1]);
  nor g3 (n_227, n_5, sel_R_res[1]);
  not g4 (n_5, sel_R_res[0]);
endmodule

module divider_OPSIZE32(CLK, rst_n, abort, operand1, operand2, div,
     remainder, start, ready);
  input CLK, rst_n, abort, start;
  input [31:0] operand1, operand2;
  output [31:0] div, remainder;
  output ready;
  wire CLK, rst_n, abort, start;
  wire [31:0] operand1, operand2;
  wire [31:0] div, remainder;
  wire ready;
  wire [1:0] sel_R_A;
  wire [1:0] sel_R_res;
  wire A_majeq_B, load_R_A, load_R_B, load_R_cnt, load_R_res,
       sel_R_cnt, z_cnt;
  divider_ctrl CTRL(.CLK (CLK), .rst_n (rst_n), .abort (abort), .start
       (start), .ready (ready), .load_R_A (load_R_A), .sel_R_A
       (sel_R_A), .load_R_B (load_R_B), .load_R_res (load_R_res),
       .sel_R_res (sel_R_res), .load_R_cnt (load_R_cnt), .sel_R_cnt
       (sel_R_cnt), .A_majeq_B (A_majeq_B), .z_cnt (z_cnt));
  divider_dp_OPSIZE32 DP(.CLK (CLK), .rst_n (rst_n), .operand1
       (operand1), .operand2 (operand2), .div (div), .remainder
       (remainder), .load_R_A (load_R_A), .sel_R_A (sel_R_A), .load_R_B
       (load_R_B), .load_R_res (load_R_res), .sel_R_res (sel_R_res),
       .load_R_cnt (load_R_cnt), .sel_R_cnt (sel_R_cnt), .A_majeq_B
       (A_majeq_B), .z_cnt (z_cnt));
endmodule

module equal_unsigned_109(A, B, Z);
  input [31:0] A;
  input B;
  output Z;
  wire [31:0] A;
  wire B;
  wire Z;
  wire n_35, n_36, n_37, n_38, n_39, n_40, n_41, n_42;
  wire n_43, n_44, n_45, n_46;
  xnor g1 (n_35, A[0], B);
  nor g2 (n_36, A[31], A[30], A[29], A[28]);
  nor g3 (n_37, A[27], A[26], A[25], A[24]);
  nor g4 (n_38, A[23], A[22], A[21], A[20]);
  nor g5 (n_39, A[19], A[18], A[17], A[16]);
  nor g6 (n_40, A[15], A[14], A[13], A[12]);
  nor g7 (n_41, A[11], A[10], A[9], A[8]);
  nor g8 (n_42, A[7], A[6], A[5], A[4]);
  nor g9 (n_43, A[3], A[2], A[1]);
  nand g10 (n_45, n_35, n_36, n_37, n_38);
  nand g11 (n_46, n_39, n_40, n_41, n_42);
  not g12 (n_44, n_43);
  nor g13 (Z, n_44, n_45, n_46);
endmodule

module sub_unsigned_113(A, B, Z);
  input [31:0] A, B;
  output [32:0] Z;
  wire [31:0] A, B;
  wire [32:0] Z;
  wire n_100, n_101, n_102, n_103, n_104, n_105, n_106, n_107;
  wire n_108, n_109, n_110, n_111, n_112, n_113, n_114, n_115;
  wire n_116, n_117, n_118, n_119, n_120, n_121, n_122, n_123;
  wire n_124, n_125, n_126, n_127, n_128, n_129, n_130, n_131;
  wire n_132, n_133, n_135, n_136, n_137, n_138, n_139, n_140;
  wire n_141, n_142, n_143, n_144, n_145, n_146, n_147, n_148;
  wire n_149, n_150, n_151, n_152, n_153, n_154, n_155, n_156;
  wire n_157, n_158, n_159, n_160, n_161, n_162, n_163, n_164;
  wire n_165, n_166, n_167, n_168, n_169, n_170, n_171, n_172;
  wire n_173, n_174, n_175, n_176, n_177, n_178, n_179, n_180;
  wire n_181, n_182, n_183, n_184, n_185, n_186, n_187, n_188;
  wire n_189, n_190, n_191, n_192, n_193, n_194, n_195, n_196;
  wire n_197, n_198, n_199, n_200, n_201, n_202, n_203, n_204;
  wire n_205, n_206, n_207, n_208, n_209, n_210, n_211, n_212;
  wire n_213, n_214, n_215, n_216, n_217, n_218, n_219, n_220;
  wire n_221, n_222, n_223, n_224, n_225, n_226, n_227, n_228;
  wire n_229, n_230, n_231, n_232, n_233, n_234, n_235, n_236;
  wire n_237, n_238, n_239, n_240, n_241, n_242, n_243, n_244;
  wire n_245, n_246, n_247, n_248, n_249, n_250, n_251, n_252;
  wire n_253, n_254, n_255, n_256, n_257, n_258, n_259, n_260;
  wire n_261, n_262, n_263, n_264, n_265, n_266, n_267, n_268;
  wire n_269, n_270, n_271, n_272, n_273, n_274, n_275, n_276;
  wire n_277, n_278, n_279, n_280, n_281, n_282, n_283, n_284;
  wire n_285, n_286, n_287, n_288, n_289, n_290, n_291, n_292;
  wire n_293, n_294, n_295, n_296, n_297, n_298, n_299, n_300;
  wire n_301, n_302, n_303, n_304, n_305, n_306, n_307, n_308;
  wire n_309, n_310, n_311, n_312, n_313, n_314, n_315, n_316;
  wire n_317, n_318, n_319, n_320, n_321, n_322, n_323, n_324;
  wire n_325, n_326, n_327, n_328, n_329, n_330, n_331, n_332;
  wire n_333, n_334, n_335, n_336, n_337, n_338, n_339, n_340;
  wire n_341, n_342, n_343, n_344, n_345, n_346, n_347, n_348;
  wire n_349, n_350, n_351, n_352, n_353, n_354, n_355, n_356;
  wire n_357, n_358, n_359, n_360, n_361, n_362, n_363, n_364;
  wire n_365, n_366, n_367, n_368, n_369, n_370, n_371, n_372;
  wire n_373, n_374, n_375, n_376, n_377, n_378, n_379, n_380;
  wire n_381, n_382, n_383, n_384, n_385, n_386, n_387, n_388;
  wire n_389, n_390, n_391, n_392, n_393, n_394, n_395, n_396;
  wire n_397, n_398, n_399, n_400, n_401, n_402, n_403, n_404;
  wire n_405, n_406, n_407, n_408, n_409, n_410, n_411, n_412;
  wire n_413, n_414, n_415, n_416, n_417, n_418, n_419, n_420;
  wire n_421, n_422, n_423, n_424, n_425, n_426, n_427, n_428;
  wire n_429, n_430, n_431, n_432, n_433, n_434, n_435, n_436;
  wire n_437, n_438, n_439, n_440, n_441, n_442, n_443, n_444;
  wire n_445, n_446, n_447, n_448, n_449, n_450, n_451, n_452;
  wire n_453, n_454, n_455, n_456, n_457, n_458, n_459, n_460;
  wire n_461, n_462, n_463, n_464, n_465, n_466, n_467, n_468;
  wire n_469, n_470, n_471, n_472, n_473, n_474, n_475, n_476;
  wire n_477, n_478, n_479, n_480, n_481, n_482, n_483, n_484;
  wire n_485, n_486, n_487, n_488, n_489, n_490, n_491, n_492;
  wire n_493, n_494, n_495, n_496, n_497, n_498, n_499, n_500;
  wire n_501, n_502, n_503, n_504, n_505, n_506, n_507, n_508;
  wire n_509, n_510, n_511, n_512, n_513, n_514, n_515, n_516;
  wire n_517, n_518, n_519, n_520, n_521, n_522, n_523, n_524;
  wire n_525, n_526, n_527, n_528, n_529, n_530, n_531, n_532;
  wire n_533, n_534, n_535, n_536, n_537, n_538, n_539, n_540;
  wire n_541, n_542, n_543, n_544, n_545, n_546, n_547, n_548;
  not g2 (n_100, B[31]);
  not g3 (n_101, B[30]);
  not g4 (n_102, B[29]);
  not g5 (n_103, B[28]);
  not g6 (n_104, B[27]);
  not g7 (n_105, B[26]);
  not g8 (n_106, B[25]);
  not g9 (n_107, B[24]);
  not g10 (n_108, B[23]);
  not g11 (n_109, B[22]);
  not g12 (n_110, B[21]);
  not g13 (n_111, B[20]);
  not g14 (n_112, B[19]);
  not g15 (n_113, B[18]);
  not g16 (n_114, B[17]);
  not g17 (n_115, B[16]);
  not g18 (n_116, B[15]);
  not g19 (n_117, B[14]);
  not g20 (n_118, B[13]);
  not g21 (n_119, B[12]);
  not g22 (n_120, B[11]);
  not g23 (n_121, B[10]);
  not g24 (n_122, B[9]);
  not g25 (n_123, B[8]);
  not g26 (n_124, B[7]);
  not g27 (n_125, B[6]);
  not g28 (n_126, B[5]);
  not g29 (n_127, B[4]);
  not g30 (n_128, B[3]);
  not g31 (n_129, B[2]);
  not g32 (n_130, B[1]);
  not g33 (n_131, B[0]);
  not g34 (Z[32], n_132);
  xor g35 (n_548, A[0], n_131);
  nand g38 (n_136, n_133, B[0]);
  nor g39 (n_135, A[1], n_130);
  nand g40 (n_138, A[1], n_130);
  nor g41 (n_145, A[2], n_129);
  nand g42 (n_140, A[2], n_129);
  nor g43 (n_141, A[3], n_128);
  nand g44 (n_142, A[3], n_128);
  nor g45 (n_151, A[4], n_127);
  nand g46 (n_146, A[4], n_127);
  nor g47 (n_147, A[5], n_126);
  nand g48 (n_148, A[5], n_126);
  nor g49 (n_157, A[6], n_125);
  nand g50 (n_152, A[6], n_125);
  nor g51 (n_153, A[7], n_124);
  nand g52 (n_154, A[7], n_124);
  nor g53 (n_163, A[8], n_123);
  nand g54 (n_158, A[8], n_123);
  nor g55 (n_159, A[9], n_122);
  nand g56 (n_160, A[9], n_122);
  nor g57 (n_169, A[10], n_121);
  nand g58 (n_164, A[10], n_121);
  nor g59 (n_165, A[11], n_120);
  nand g60 (n_166, A[11], n_120);
  nor g61 (n_175, A[12], n_119);
  nand g62 (n_170, A[12], n_119);
  nor g63 (n_171, A[13], n_118);
  nand g64 (n_172, A[13], n_118);
  nor g65 (n_181, A[14], n_117);
  nand g66 (n_176, A[14], n_117);
  nor g67 (n_177, A[15], n_116);
  nand g68 (n_178, A[15], n_116);
  nor g69 (n_187, A[16], n_115);
  nand g70 (n_182, A[16], n_115);
  nor g71 (n_183, A[17], n_114);
  nand g72 (n_184, A[17], n_114);
  nor g73 (n_193, A[18], n_113);
  nand g74 (n_188, A[18], n_113);
  nor g75 (n_189, A[19], n_112);
  nand g76 (n_190, A[19], n_112);
  nor g77 (n_199, A[20], n_111);
  nand g78 (n_194, A[20], n_111);
  nor g79 (n_195, A[21], n_110);
  nand g80 (n_196, A[21], n_110);
  nor g81 (n_205, A[22], n_109);
  nand g82 (n_200, A[22], n_109);
  nor g83 (n_201, A[23], n_108);
  nand g84 (n_202, A[23], n_108);
  nor g85 (n_211, A[24], n_107);
  nand g86 (n_206, A[24], n_107);
  nor g87 (n_207, A[25], n_106);
  nand g88 (n_208, A[25], n_106);
  nor g89 (n_217, A[26], n_105);
  nand g90 (n_212, A[26], n_105);
  nor g91 (n_213, A[27], n_104);
  nand g92 (n_214, A[27], n_104);
  nor g93 (n_223, A[28], n_103);
  nand g94 (n_218, A[28], n_103);
  nor g95 (n_219, A[29], n_102);
  nand g96 (n_220, A[29], n_102);
  nor g97 (n_229, A[30], n_101);
  nand g98 (n_224, A[30], n_101);
  nor g99 (n_225, A[31], n_100);
  nand g100 (n_226, A[31], n_100);
  not g101 (n_137, n_135);
  nand g102 (n_139, n_136, n_137);
  nand g103 (n_230, n_138, n_139);
  nor g104 (n_143, n_140, n_141);
  not g105 (n_144, n_142);
  nor g106 (n_234, n_143, n_144);
  nor g107 (n_233, n_145, n_141);
  nor g108 (n_149, n_146, n_147);
  not g109 (n_150, n_148);
  nor g110 (n_236, n_149, n_150);
  nor g111 (n_239, n_151, n_147);
  nor g112 (n_155, n_152, n_153);
  not g113 (n_156, n_154);
  nor g114 (n_243, n_155, n_156);
  nor g115 (n_241, n_157, n_153);
  nor g116 (n_161, n_158, n_159);
  not g117 (n_162, n_160);
  nor g118 (n_246, n_161, n_162);
  nor g119 (n_249, n_163, n_159);
  nor g120 (n_167, n_164, n_165);
  not g121 (n_168, n_166);
  nor g122 (n_253, n_167, n_168);
  nor g123 (n_251, n_169, n_165);
  nor g124 (n_173, n_170, n_171);
  not g125 (n_174, n_172);
  nor g126 (n_256, n_173, n_174);
  nor g127 (n_259, n_175, n_171);
  nor g128 (n_179, n_176, n_177);
  not g129 (n_180, n_178);
  nor g130 (n_263, n_179, n_180);
  nor g131 (n_261, n_181, n_177);
  nor g132 (n_185, n_182, n_183);
  not g133 (n_186, n_184);
  nor g134 (n_266, n_185, n_186);
  nor g135 (n_269, n_187, n_183);
  nor g136 (n_191, n_188, n_189);
  not g137 (n_192, n_190);
  nor g138 (n_273, n_191, n_192);
  nor g139 (n_271, n_193, n_189);
  nor g140 (n_197, n_194, n_195);
  not g141 (n_198, n_196);
  nor g142 (n_276, n_197, n_198);
  nor g143 (n_279, n_199, n_195);
  nor g144 (n_203, n_200, n_201);
  not g145 (n_204, n_202);
  nor g146 (n_283, n_203, n_204);
  nor g147 (n_281, n_205, n_201);
  nor g148 (n_209, n_206, n_207);
  not g149 (n_210, n_208);
  nor g150 (n_286, n_209, n_210);
  nor g151 (n_289, n_211, n_207);
  nor g152 (n_215, n_212, n_213);
  not g153 (n_216, n_214);
  nor g154 (n_293, n_215, n_216);
  nor g155 (n_291, n_217, n_213);
  nor g156 (n_221, n_218, n_219);
  not g157 (n_222, n_220);
  nor g158 (n_296, n_221, n_222);
  nor g159 (n_299, n_223, n_219);
  nor g160 (n_227, n_224, n_225);
  not g161 (n_228, n_226);
  nor g162 (n_303, n_227, n_228);
  nor g163 (n_301, n_229, n_225);
  not g164 (n_231, n_145);
  nand g165 (n_232, n_230, n_231);
  nand g166 (n_476, n_140, n_232);
  nand g167 (n_235, n_233, n_230);
  nand g168 (n_306, n_234, n_235);
  nor g169 (n_237, n_157, n_236);
  not g170 (n_238, n_152);
  nor g171 (n_312, n_237, n_238);
  not g172 (n_240, n_157);
  nand g173 (n_310, n_239, n_240);
  not g174 (n_242, n_241);
  nor g175 (n_244, n_236, n_242);
  not g176 (n_245, n_243);
  nor g177 (n_316, n_244, n_245);
  nand g178 (n_314, n_239, n_241);
  nor g179 (n_247, n_169, n_246);
  not g180 (n_248, n_164);
  nor g181 (n_369, n_247, n_248);
  not g182 (n_250, n_169);
  nand g183 (n_367, n_249, n_250);
  not g184 (n_252, n_251);
  nor g185 (n_254, n_246, n_252);
  not g186 (n_255, n_253);
  nor g187 (n_318, n_254, n_255);
  nand g188 (n_321, n_249, n_251);
  nor g189 (n_257, n_181, n_256);
  not g190 (n_258, n_176);
  nor g191 (n_326, n_257, n_258);
  not g192 (n_260, n_181);
  nand g193 (n_325, n_259, n_260);
  not g194 (n_262, n_261);
  nor g195 (n_264, n_256, n_262);
  not g196 (n_265, n_263);
  nor g197 (n_330, n_264, n_265);
  nand g198 (n_329, n_259, n_261);
  nor g199 (n_267, n_193, n_266);
  not g200 (n_268, n_188);
  nor g201 (n_427, n_267, n_268);
  not g202 (n_270, n_193);
  nand g203 (n_425, n_269, n_270);
  not g204 (n_272, n_271);
  nor g205 (n_274, n_266, n_272);
  not g206 (n_275, n_273);
  nor g207 (n_333, n_274, n_275);
  nand g208 (n_336, n_269, n_271);
  nor g209 (n_277, n_205, n_276);
  not g210 (n_278, n_200);
  nor g211 (n_341, n_277, n_278);
  not g212 (n_280, n_205);
  nand g213 (n_340, n_279, n_280);
  not g214 (n_282, n_281);
  nor g215 (n_284, n_276, n_282);
  not g216 (n_285, n_283);
  nor g217 (n_345, n_284, n_285);
  nand g218 (n_344, n_279, n_281);
  nor g219 (n_287, n_217, n_286);
  not g220 (n_288, n_212);
  nor g221 (n_394, n_287, n_288);
  not g222 (n_290, n_217);
  nand g223 (n_393, n_289, n_290);
  not g224 (n_292, n_291);
  nor g225 (n_294, n_286, n_292);
  not g226 (n_295, n_293);
  nor g227 (n_348, n_294, n_295);
  nand g228 (n_351, n_289, n_291);
  nor g229 (n_297, n_229, n_296);
  not g230 (n_298, n_224);
  nor g231 (n_356, n_297, n_298);
  not g232 (n_300, n_229);
  nand g233 (n_355, n_299, n_300);
  not g234 (n_302, n_301);
  nor g235 (n_304, n_296, n_302);
  not g236 (n_305, n_303);
  nor g237 (n_360, n_304, n_305);
  nand g238 (n_359, n_299, n_301);
  not g239 (n_307, n_151);
  nand g240 (n_308, n_306, n_307);
  nand g241 (n_480, n_146, n_308);
  nand g242 (n_309, n_239, n_306);
  nand g243 (n_482, n_236, n_309);
  not g244 (n_311, n_310);
  nand g245 (n_313, n_306, n_311);
  nand g246 (n_485, n_312, n_313);
  not g247 (n_315, n_314);
  nand g248 (n_317, n_306, n_315);
  nand g249 (n_363, n_316, n_317);
  nor g250 (n_319, n_175, n_318);
  not g251 (n_320, n_170);
  nor g252 (n_374, n_319, n_320);
  nor g253 (n_373, n_175, n_321);
  not g254 (n_322, n_259);
  nor g255 (n_323, n_318, n_322);
  not g256 (n_324, n_256);
  nor g257 (n_377, n_323, n_324);
  nor g258 (n_376, n_321, n_322);
  nor g259 (n_327, n_325, n_318);
  not g260 (n_328, n_326);
  nor g261 (n_380, n_327, n_328);
  nor g262 (n_379, n_321, n_325);
  nor g263 (n_331, n_329, n_318);
  not g264 (n_332, n_330);
  nor g265 (n_383, n_331, n_332);
  nor g266 (n_382, n_321, n_329);
  nor g267 (n_334, n_199, n_333);
  not g268 (n_335, n_194);
  nor g269 (n_432, n_334, n_335);
  nor g270 (n_431, n_199, n_336);
  not g271 (n_337, n_279);
  nor g272 (n_338, n_333, n_337);
  not g273 (n_339, n_276);
  nor g274 (n_435, n_338, n_339);
  nor g275 (n_434, n_336, n_337);
  nor g276 (n_342, n_340, n_333);
  not g277 (n_343, n_341);
  nor g278 (n_438, n_342, n_343);
  nor g279 (n_437, n_336, n_340);
  nor g280 (n_346, n_344, n_333);
  not g281 (n_347, n_345);
  nor g282 (n_385, n_346, n_347);
  nor g283 (n_388, n_336, n_344);
  nor g284 (n_349, n_223, n_348);
  not g285 (n_350, n_218);
  nor g286 (n_403, n_349, n_350);
  nor g287 (n_401, n_223, n_351);
  not g288 (n_352, n_299);
  nor g289 (n_353, n_348, n_352);
  not g290 (n_354, n_296);
  nor g291 (n_408, n_353, n_354);
  nor g292 (n_406, n_351, n_352);
  nor g293 (n_357, n_355, n_348);
  not g294 (n_358, n_356);
  nor g295 (n_413, n_357, n_358);
  nor g296 (n_411, n_351, n_355);
  nor g297 (n_361, n_359, n_348);
  not g298 (n_362, n_360);
  nor g299 (n_418, n_361, n_362);
  nor g300 (n_416, n_351, n_359);
  not g301 (n_364, n_163);
  nand g302 (n_365, n_363, n_364);
  nand g303 (n_489, n_158, n_365);
  nand g304 (n_366, n_249, n_363);
  nand g305 (n_491, n_246, n_366);
  not g306 (n_368, n_367);
  nand g307 (n_370, n_363, n_368);
  nand g308 (n_494, n_369, n_370);
  not g309 (n_371, n_321);
  nand g310 (n_372, n_363, n_371);
  nand g311 (n_497, n_318, n_372);
  nand g312 (n_375, n_373, n_363);
  nand g313 (n_500, n_374, n_375);
  nand g314 (n_378, n_376, n_363);
  nand g315 (n_502, n_377, n_378);
  nand g316 (n_381, n_379, n_363);
  nand g317 (n_505, n_380, n_381);
  nand g318 (n_384, n_382, n_363);
  nand g319 (n_421, n_383, n_384);
  nor g320 (n_386, n_211, n_385);
  not g321 (n_387, n_206);
  nor g322 (n_443, n_386, n_387);
  not g323 (n_389, n_211);
  nand g324 (n_441, n_388, n_389);
  not g325 (n_390, n_289);
  nor g326 (n_391, n_385, n_390);
  not g327 (n_392, n_286);
  nor g328 (n_447, n_391, n_392);
  nand g329 (n_445, n_289, n_388);
  nor g330 (n_395, n_393, n_385);
  not g331 (n_396, n_394);
  nor g332 (n_451, n_395, n_396);
  not g333 (n_397, n_393);
  nand g334 (n_449, n_388, n_397);
  nor g335 (n_398, n_351, n_385);
  not g336 (n_399, n_348);
  nor g337 (n_455, n_398, n_399);
  not g338 (n_400, n_351);
  nand g339 (n_453, n_388, n_400);
  not g340 (n_402, n_401);
  nor g341 (n_404, n_385, n_402);
  not g342 (n_405, n_403);
  nor g343 (n_459, n_404, n_405);
  nand g344 (n_457, n_388, n_401);
  not g345 (n_407, n_406);
  nor g346 (n_409, n_385, n_407);
  not g347 (n_410, n_408);
  nor g348 (n_463, n_409, n_410);
  nand g349 (n_461, n_388, n_406);
  not g350 (n_412, n_411);
  nor g351 (n_414, n_385, n_412);
  not g352 (n_415, n_413);
  nor g353 (n_467, n_414, n_415);
  nand g354 (n_465, n_388, n_411);
  not g355 (n_417, n_416);
  nor g356 (n_419, n_385, n_417);
  not g357 (n_420, n_418);
  nor g358 (n_471, n_419, n_420);
  nand g359 (n_469, n_388, n_416);
  not g360 (n_422, n_187);
  nand g361 (n_423, n_421, n_422);
  nand g362 (n_509, n_182, n_423);
  nand g363 (n_424, n_269, n_421);
  nand g364 (n_511, n_266, n_424);
  not g365 (n_426, n_425);
  nand g366 (n_428, n_421, n_426);
  nand g367 (n_514, n_427, n_428);
  not g368 (n_429, n_336);
  nand g369 (n_430, n_421, n_429);
  nand g370 (n_517, n_333, n_430);
  nand g371 (n_433, n_431, n_421);
  nand g372 (n_520, n_432, n_433);
  nand g373 (n_436, n_434, n_421);
  nand g374 (n_522, n_435, n_436);
  nand g375 (n_439, n_437, n_421);
  nand g376 (n_525, n_438, n_439);
  nand g377 (n_440, n_388, n_421);
  nand g378 (n_527, n_385, n_440);
  not g379 (n_442, n_441);
  nand g380 (n_444, n_421, n_442);
  nand g381 (n_530, n_443, n_444);
  not g382 (n_446, n_445);
  nand g383 (n_448, n_421, n_446);
  nand g384 (n_532, n_447, n_448);
  not g385 (n_450, n_449);
  nand g386 (n_452, n_421, n_450);
  nand g387 (n_535, n_451, n_452);
  not g388 (n_454, n_453);
  nand g389 (n_456, n_421, n_454);
  nand g390 (n_538, n_455, n_456);
  not g391 (n_458, n_457);
  nand g392 (n_460, n_421, n_458);
  nand g393 (n_541, n_459, n_460);
  not g394 (n_462, n_461);
  nand g395 (n_464, n_421, n_462);
  nand g396 (n_543, n_463, n_464);
  not g397 (n_466, n_465);
  nand g398 (n_468, n_421, n_466);
  nand g399 (n_546, n_467, n_468);
  not g400 (n_470, n_469);
  nand g401 (n_472, n_421, n_470);
  nand g402 (n_132, n_471, n_472);
  nand g403 (n_473, n_137, n_138);
  xnor g404 (Z[1], n_136, n_473);
  nand g405 (n_474, n_231, n_140);
  xnor g406 (Z[2], n_230, n_474);
  not g407 (n_475, n_141);
  nand g408 (n_477, n_475, n_142);
  xnor g409 (Z[3], n_476, n_477);
  nand g410 (n_478, n_307, n_146);
  xnor g411 (Z[4], n_306, n_478);
  not g412 (n_479, n_147);
  nand g413 (n_481, n_479, n_148);
  xnor g414 (Z[5], n_480, n_481);
  nand g415 (n_483, n_240, n_152);
  xnor g416 (Z[6], n_482, n_483);
  not g417 (n_484, n_153);
  nand g418 (n_486, n_484, n_154);
  xnor g419 (Z[7], n_485, n_486);
  nand g420 (n_487, n_364, n_158);
  xnor g421 (Z[8], n_363, n_487);
  not g422 (n_488, n_159);
  nand g423 (n_490, n_488, n_160);
  xnor g424 (Z[9], n_489, n_490);
  nand g425 (n_492, n_250, n_164);
  xnor g426 (Z[10], n_491, n_492);
  not g427 (n_493, n_165);
  nand g428 (n_495, n_493, n_166);
  xnor g429 (Z[11], n_494, n_495);
  not g430 (n_496, n_175);
  nand g431 (n_498, n_496, n_170);
  xnor g432 (Z[12], n_497, n_498);
  not g433 (n_499, n_171);
  nand g434 (n_501, n_499, n_172);
  xnor g435 (Z[13], n_500, n_501);
  nand g436 (n_503, n_260, n_176);
  xnor g437 (Z[14], n_502, n_503);
  not g438 (n_504, n_177);
  nand g439 (n_506, n_504, n_178);
  xnor g440 (Z[15], n_505, n_506);
  nand g441 (n_507, n_422, n_182);
  xnor g442 (Z[16], n_421, n_507);
  not g443 (n_508, n_183);
  nand g444 (n_510, n_508, n_184);
  xnor g445 (Z[17], n_509, n_510);
  nand g446 (n_512, n_270, n_188);
  xnor g447 (Z[18], n_511, n_512);
  not g448 (n_513, n_189);
  nand g449 (n_515, n_513, n_190);
  xnor g450 (Z[19], n_514, n_515);
  not g451 (n_516, n_199);
  nand g452 (n_518, n_516, n_194);
  xnor g453 (Z[20], n_517, n_518);
  not g454 (n_519, n_195);
  nand g455 (n_521, n_519, n_196);
  xnor g456 (Z[21], n_520, n_521);
  nand g457 (n_523, n_280, n_200);
  xnor g458 (Z[22], n_522, n_523);
  not g459 (n_524, n_201);
  nand g460 (n_526, n_524, n_202);
  xnor g461 (Z[23], n_525, n_526);
  nand g462 (n_528, n_389, n_206);
  xnor g463 (Z[24], n_527, n_528);
  not g464 (n_529, n_207);
  nand g465 (n_531, n_529, n_208);
  xnor g466 (Z[25], n_530, n_531);
  nand g467 (n_533, n_290, n_212);
  xnor g468 (Z[26], n_532, n_533);
  not g469 (n_534, n_213);
  nand g470 (n_536, n_534, n_214);
  xnor g471 (Z[27], n_535, n_536);
  not g472 (n_537, n_223);
  nand g473 (n_539, n_537, n_218);
  xnor g474 (Z[28], n_538, n_539);
  not g475 (n_540, n_219);
  nand g476 (n_542, n_540, n_220);
  xnor g477 (Z[29], n_541, n_542);
  nand g478 (n_544, n_300, n_224);
  xnor g479 (Z[30], n_543, n_544);
  not g480 (n_545, n_225);
  nand g481 (n_547, n_545, n_226);
  xnor g482 (Z[31], n_546, n_547);
  not g484 (n_133, A[0]);
  not g485 (Z[0], n_548);
endmodule

module bmux_114(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [31:0] in_0, in_1, in_2, in_3;
  output [31:0] z;
  wire [1:0] ctl;
  wire [31:0] in_0, in_1, in_2, in_3;
  wire [31:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[31]), .data1 (in_1[31]),
       .sel1 (ctl[1]), .data2 (in_2[31]), .data3 (in_3[31]), .z
       (z[31]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[30]), .data1 (in_1[30]),
       .sel1 (ctl[1]), .data2 (in_2[30]), .data3 (in_3[30]), .z
       (z[30]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[29]), .data1 (in_1[29]),
       .sel1 (ctl[1]), .data2 (in_2[29]), .data3 (in_3[29]), .z
       (z[29]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[28]), .data1 (in_1[28]),
       .sel1 (ctl[1]), .data2 (in_2[28]), .data3 (in_3[28]), .z
       (z[28]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[27]), .data1 (in_1[27]),
       .sel1 (ctl[1]), .data2 (in_2[27]), .data3 (in_3[27]), .z
       (z[27]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[26]), .data1 (in_1[26]),
       .sel1 (ctl[1]), .data2 (in_2[26]), .data3 (in_3[26]), .z
       (z[26]));
  CDN_bmux4 g7(.sel0 (ctl[0]), .data0 (in_0[25]), .data1 (in_1[25]),
       .sel1 (ctl[1]), .data2 (in_2[25]), .data3 (in_3[25]), .z
       (z[25]));
  CDN_bmux4 g8(.sel0 (ctl[0]), .data0 (in_0[24]), .data1 (in_1[24]),
       .sel1 (ctl[1]), .data2 (in_2[24]), .data3 (in_3[24]), .z
       (z[24]));
  CDN_bmux4 g9(.sel0 (ctl[0]), .data0 (in_0[23]), .data1 (in_1[23]),
       .sel1 (ctl[1]), .data2 (in_2[23]), .data3 (in_3[23]), .z
       (z[23]));
  CDN_bmux4 g10(.sel0 (ctl[0]), .data0 (in_0[22]), .data1 (in_1[22]),
       .sel1 (ctl[1]), .data2 (in_2[22]), .data3 (in_3[22]), .z
       (z[22]));
  CDN_bmux4 g11(.sel0 (ctl[0]), .data0 (in_0[21]), .data1 (in_1[21]),
       .sel1 (ctl[1]), .data2 (in_2[21]), .data3 (in_3[21]), .z
       (z[21]));
  CDN_bmux4 g12(.sel0 (ctl[0]), .data0 (in_0[20]), .data1 (in_1[20]),
       .sel1 (ctl[1]), .data2 (in_2[20]), .data3 (in_3[20]), .z
       (z[20]));
  CDN_bmux4 g13(.sel0 (ctl[0]), .data0 (in_0[19]), .data1 (in_1[19]),
       .sel1 (ctl[1]), .data2 (in_2[19]), .data3 (in_3[19]), .z
       (z[19]));
  CDN_bmux4 g14(.sel0 (ctl[0]), .data0 (in_0[18]), .data1 (in_1[18]),
       .sel1 (ctl[1]), .data2 (in_2[18]), .data3 (in_3[18]), .z
       (z[18]));
  CDN_bmux4 g15(.sel0 (ctl[0]), .data0 (in_0[17]), .data1 (in_1[17]),
       .sel1 (ctl[1]), .data2 (in_2[17]), .data3 (in_3[17]), .z
       (z[17]));
  CDN_bmux4 g16(.sel0 (ctl[0]), .data0 (in_0[16]), .data1 (in_1[16]),
       .sel1 (ctl[1]), .data2 (in_2[16]), .data3 (in_3[16]), .z
       (z[16]));
  CDN_bmux4 g17(.sel0 (ctl[0]), .data0 (in_0[15]), .data1 (in_1[15]),
       .sel1 (ctl[1]), .data2 (in_2[15]), .data3 (in_3[15]), .z
       (z[15]));
  CDN_bmux4 g18(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .z
       (z[14]));
  CDN_bmux4 g19(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .z
       (z[13]));
  CDN_bmux4 g20(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .z
       (z[12]));
  CDN_bmux4 g21(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .z
       (z[11]));
  CDN_bmux4 g22(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .z
       (z[10]));
  CDN_bmux4 g23(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .z (z[9]));
  CDN_bmux4 g24(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .z (z[8]));
  CDN_bmux4 g25(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .z (z[7]));
  CDN_bmux4 g26(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .z (z[6]));
  CDN_bmux4 g27(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g28(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g29(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g30(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g31(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g32(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module mcd_dp_OPSIZE32(CLK, rst_n, operand1, operand2, res, load_R_A,
     sel_R_A, load_R_B, sel_R_B, load_R_res, sel_R_res, div1_abort,
     div1_start, A_majeq_B, z_A, z_B, div1_ready);
  input CLK, rst_n, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  input [31:0] operand1, operand2;
  input [1:0] sel_R_B;
  output [31:0] res;
  output A_majeq_B, z_A, z_B, div1_ready;
  wire CLK, rst_n, load_R_A, sel_R_A, load_R_B, load_R_res, sel_R_res,
       div1_abort, div1_start;
  wire [31:0] operand1, operand2;
  wire [1:0] sel_R_B;
  wire [31:0] res;
  wire A_majeq_B, z_A, z_B, div1_ready;
  wire [31:0] R_A;
  wire [31:0] R_B;
  wire [31:0] div1_remainder;
  wire [32:0] adder1_out;
  wire [31:0] in_R_B;
  wire [31:0] in_R_A;
  wire [31:0] in_R_res;
  wire UNCONNECTED137, UNCONNECTED138, UNCONNECTED139, UNCONNECTED140,
       UNCONNECTED141, UNCONNECTED142, UNCONNECTED143, UNCONNECTED144;
  wire UNCONNECTED145, UNCONNECTED146, UNCONNECTED147, UNCONNECTED148,
       UNCONNECTED149, UNCONNECTED150, UNCONNECTED151, UNCONNECTED152;
  wire UNCONNECTED153, UNCONNECTED154, UNCONNECTED155, UNCONNECTED156,
       UNCONNECTED157, UNCONNECTED158, UNCONNECTED159, UNCONNECTED160;
  wire UNCONNECTED161, UNCONNECTED162, UNCONNECTED163, UNCONNECTED164,
       UNCONNECTED165, UNCONNECTED166, UNCONNECTED167, UNCONNECTED168;
  wire UNCONNECTED169, UNCONNECTED170, UNCONNECTED171, UNCONNECTED172,
       UNCONNECTED173, UNCONNECTED174, UNCONNECTED175, UNCONNECTED176;
  wire UNCONNECTED177, UNCONNECTED178, UNCONNECTED179, UNCONNECTED180,
       UNCONNECTED181, UNCONNECTED182, UNCONNECTED183, UNCONNECTED184;
  wire UNCONNECTED185, UNCONNECTED186, UNCONNECTED187, UNCONNECTED188,
       UNCONNECTED189, UNCONNECTED190, UNCONNECTED191, UNCONNECTED192;
  wire UNCONNECTED193, UNCONNECTED194, UNCONNECTED195, UNCONNECTED196,
       UNCONNECTED197, UNCONNECTED198, UNCONNECTED199, UNCONNECTED200;
  wire UNCONNECTED201, UNCONNECTED202, UNCONNECTED203, UNCONNECTED204,
       UNCONNECTED205, UNCONNECTED206, UNCONNECTED207, UNCONNECTED208;
  wire UNCONNECTED209, UNCONNECTED210, UNCONNECTED211, UNCONNECTED212,
       UNCONNECTED213, UNCONNECTED214, UNCONNECTED215, UNCONNECTED216;
  wire UNCONNECTED217, UNCONNECTED218, UNCONNECTED219, UNCONNECTED220,
       UNCONNECTED221, UNCONNECTED222, UNCONNECTED223, UNCONNECTED224;
  wire UNCONNECTED225, UNCONNECTED226, UNCONNECTED227, UNCONNECTED228,
       UNCONNECTED229, UNCONNECTED230, UNCONNECTED231, UNCONNECTED232;
  wire UNCONNECTED233, UNCONNECTED234, UNCONNECTED235, UNCONNECTED236,
       UNCONNECTED237, UNCONNECTED238, UNCONNECTED239, UNCONNECTED240;
  wire UNCONNECTED241, UNCONNECTED242, UNCONNECTED243, UNCONNECTED244,
       UNCONNECTED245, UNCONNECTED246, UNCONNECTED247, UNCONNECTED248;
  wire UNCONNECTED249, UNCONNECTED250, UNCONNECTED251, UNCONNECTED252,
       UNCONNECTED253, UNCONNECTED254, UNCONNECTED255, UNCONNECTED256;
  wire UNCONNECTED257, UNCONNECTED258, UNCONNECTED259, UNCONNECTED260,
       UNCONNECTED261, UNCONNECTED262, UNCONNECTED263, UNCONNECTED264;
  wire n_142, n_214, n_215, n_216;
  divider_OPSIZE32 DIV1(.CLK (CLK), .rst_n (rst_n), .abort
       (div1_abort), .operand1 (R_A), .operand2 (R_B), .div
       ({UNCONNECTED168, UNCONNECTED167, UNCONNECTED166,
       UNCONNECTED165, UNCONNECTED164, UNCONNECTED163, UNCONNECTED162,
       UNCONNECTED161, UNCONNECTED160, UNCONNECTED159, UNCONNECTED158,
       UNCONNECTED157, UNCONNECTED156, UNCONNECTED155, UNCONNECTED154,
       UNCONNECTED153, UNCONNECTED152, UNCONNECTED151, UNCONNECTED150,
       UNCONNECTED149, UNCONNECTED148, UNCONNECTED147, UNCONNECTED146,
       UNCONNECTED145, UNCONNECTED144, UNCONNECTED143, UNCONNECTED142,
       UNCONNECTED141, UNCONNECTED140, UNCONNECTED139, UNCONNECTED138,
       UNCONNECTED137}), .remainder (div1_remainder), .start
       (div1_start), .ready (div1_ready));
  equal_unsigned_109 eq_125_25(.A (R_A), .B (1'b0), .Z (n_215));
  equal_unsigned_109 eq_126_25(.A (R_B), .B (1'b0), .Z (n_214));
  sub_unsigned_113 sub_122_57(.A (R_A), .B (R_B), .Z (adder1_out));
  bmux_114 mux_in_R_B_110_10(.ctl (sel_R_B), .in_0 (operand2), .in_1
       (R_A), .in_2 (div1_remainder), .in_3 (div1_remainder), .z
       (in_R_B));
  bmux_90 mux_R_B_89_18(.ctl (n_142), .in_0
       (32'b00000000000000000000000000000000), .in_1
       (32'b00000000000000000000000000000000), .z ({UNCONNECTED200,
       UNCONNECTED199, UNCONNECTED198, UNCONNECTED197, UNCONNECTED196,
       UNCONNECTED195, UNCONNECTED194, UNCONNECTED193, UNCONNECTED192,
       UNCONNECTED191, UNCONNECTED190, UNCONNECTED189, UNCONNECTED188,
       UNCONNECTED187, UNCONNECTED186, UNCONNECTED185, UNCONNECTED184,
       UNCONNECTED183, UNCONNECTED182, UNCONNECTED181, UNCONNECTED180,
       UNCONNECTED179, UNCONNECTED178, UNCONNECTED177, UNCONNECTED176,
       UNCONNECTED175, UNCONNECTED174, UNCONNECTED173, UNCONNECTED172,
       UNCONNECTED171, UNCONNECTED170, UNCONNECTED169}));
  bmux_90 mux_in_R_A_106_10(.ctl (sel_R_A), .in_0 (operand1), .in_1
       (R_B), .z (in_R_A));
  bmux_90 mux_R_A_89_18(.ctl (n_142), .in_0
       (32'b00000000000000000000000000000000), .in_1
       (32'b00000000000000000000000000000000), .z ({UNCONNECTED232,
       UNCONNECTED231, UNCONNECTED230, UNCONNECTED229, UNCONNECTED228,
       UNCONNECTED227, UNCONNECTED226, UNCONNECTED225, UNCONNECTED224,
       UNCONNECTED223, UNCONNECTED222, UNCONNECTED221, UNCONNECTED220,
       UNCONNECTED219, UNCONNECTED218, UNCONNECTED217, UNCONNECTED216,
       UNCONNECTED215, UNCONNECTED214, UNCONNECTED213, UNCONNECTED212,
       UNCONNECTED211, UNCONNECTED210, UNCONNECTED209, UNCONNECTED208,
       UNCONNECTED207, UNCONNECTED206, UNCONNECTED205, UNCONNECTED204,
       UNCONNECTED203, UNCONNECTED202, UNCONNECTED201}));
  bmux_90 mux_in_R_res_115_10(.ctl (sel_R_res), .in_0
       (32'b00000000000000000000000000000000), .in_1 (R_A), .z
       (in_R_res));
  bmux_90 mux_R_res_89_18(.ctl (n_142), .in_0
       (32'b00000000000000000000000000000000), .in_1
       (32'b00000000000000000000000000000000), .z ({UNCONNECTED264,
       UNCONNECTED263, UNCONNECTED262, UNCONNECTED261, UNCONNECTED260,
       UNCONNECTED259, UNCONNECTED258, UNCONNECTED257, UNCONNECTED256,
       UNCONNECTED255, UNCONNECTED254, UNCONNECTED253, UNCONNECTED252,
       UNCONNECTED251, UNCONNECTED250, UNCONNECTED249, UNCONNECTED248,
       UNCONNECTED247, UNCONNECTED246, UNCONNECTED245, UNCONNECTED244,
       UNCONNECTED243, UNCONNECTED242, UNCONNECTED241, UNCONNECTED240,
       UNCONNECTED239, UNCONNECTED238, UNCONNECTED237, UNCONNECTED236,
       UNCONNECTED235, UNCONNECTED234, UNCONNECTED233}));
  bmux mux_z_B_126_25(.ctl (n_214), .in_0 (1'b0), .in_1 (1'b1), .z
       (z_B));
  bmux mux_z_A_125_25(.ctl (n_215), .in_0 (1'b0), .in_1 (1'b1), .z
       (z_A));
  bmux mux_A_majeq_B_124_55(.ctl (n_216), .in_0 (1'b0), .in_1 (1'b1),
       .z (A_majeq_B));
  CDN_flop \R_A_reg[0] (.clk (CLK), .d (in_R_A[0]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[0]));
  CDN_flop \R_A_reg[1] (.clk (CLK), .d (in_R_A[1]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[1]));
  CDN_flop \R_A_reg[2] (.clk (CLK), .d (in_R_A[2]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[2]));
  CDN_flop \R_A_reg[3] (.clk (CLK), .d (in_R_A[3]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[3]));
  CDN_flop \R_A_reg[4] (.clk (CLK), .d (in_R_A[4]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[4]));
  CDN_flop \R_A_reg[5] (.clk (CLK), .d (in_R_A[5]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[5]));
  CDN_flop \R_A_reg[6] (.clk (CLK), .d (in_R_A[6]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[6]));
  CDN_flop \R_A_reg[7] (.clk (CLK), .d (in_R_A[7]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[7]));
  CDN_flop \R_A_reg[8] (.clk (CLK), .d (in_R_A[8]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[8]));
  CDN_flop \R_A_reg[9] (.clk (CLK), .d (in_R_A[9]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[9]));
  CDN_flop \R_A_reg[10] (.clk (CLK), .d (in_R_A[10]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[10]));
  CDN_flop \R_A_reg[11] (.clk (CLK), .d (in_R_A[11]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[11]));
  CDN_flop \R_A_reg[12] (.clk (CLK), .d (in_R_A[12]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[12]));
  CDN_flop \R_A_reg[13] (.clk (CLK), .d (in_R_A[13]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[13]));
  CDN_flop \R_A_reg[14] (.clk (CLK), .d (in_R_A[14]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[14]));
  CDN_flop \R_A_reg[15] (.clk (CLK), .d (in_R_A[15]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[15]));
  CDN_flop \R_A_reg[16] (.clk (CLK), .d (in_R_A[16]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[16]));
  CDN_flop \R_A_reg[17] (.clk (CLK), .d (in_R_A[17]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[17]));
  CDN_flop \R_A_reg[18] (.clk (CLK), .d (in_R_A[18]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[18]));
  CDN_flop \R_A_reg[19] (.clk (CLK), .d (in_R_A[19]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[19]));
  CDN_flop \R_A_reg[20] (.clk (CLK), .d (in_R_A[20]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[20]));
  CDN_flop \R_A_reg[21] (.clk (CLK), .d (in_R_A[21]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[21]));
  CDN_flop \R_A_reg[22] (.clk (CLK), .d (in_R_A[22]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[22]));
  CDN_flop \R_A_reg[23] (.clk (CLK), .d (in_R_A[23]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[23]));
  CDN_flop \R_A_reg[24] (.clk (CLK), .d (in_R_A[24]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[24]));
  CDN_flop \R_A_reg[25] (.clk (CLK), .d (in_R_A[25]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[25]));
  CDN_flop \R_A_reg[26] (.clk (CLK), .d (in_R_A[26]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[26]));
  CDN_flop \R_A_reg[27] (.clk (CLK), .d (in_R_A[27]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[27]));
  CDN_flop \R_A_reg[28] (.clk (CLK), .d (in_R_A[28]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[28]));
  CDN_flop \R_A_reg[29] (.clk (CLK), .d (in_R_A[29]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[29]));
  CDN_flop \R_A_reg[30] (.clk (CLK), .d (in_R_A[30]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[30]));
  CDN_flop \R_A_reg[31] (.clk (CLK), .d (in_R_A[31]), .sena (load_R_A),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_A[31]));
  CDN_flop \R_B_reg[0] (.clk (CLK), .d (in_R_B[0]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[0]));
  CDN_flop \R_B_reg[1] (.clk (CLK), .d (in_R_B[1]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[1]));
  CDN_flop \R_B_reg[2] (.clk (CLK), .d (in_R_B[2]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[2]));
  CDN_flop \R_B_reg[3] (.clk (CLK), .d (in_R_B[3]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[3]));
  CDN_flop \R_B_reg[4] (.clk (CLK), .d (in_R_B[4]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[4]));
  CDN_flop \R_B_reg[5] (.clk (CLK), .d (in_R_B[5]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[5]));
  CDN_flop \R_B_reg[6] (.clk (CLK), .d (in_R_B[6]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[6]));
  CDN_flop \R_B_reg[7] (.clk (CLK), .d (in_R_B[7]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[7]));
  CDN_flop \R_B_reg[8] (.clk (CLK), .d (in_R_B[8]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[8]));
  CDN_flop \R_B_reg[9] (.clk (CLK), .d (in_R_B[9]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[9]));
  CDN_flop \R_B_reg[10] (.clk (CLK), .d (in_R_B[10]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[10]));
  CDN_flop \R_B_reg[11] (.clk (CLK), .d (in_R_B[11]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[11]));
  CDN_flop \R_B_reg[12] (.clk (CLK), .d (in_R_B[12]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[12]));
  CDN_flop \R_B_reg[13] (.clk (CLK), .d (in_R_B[13]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[13]));
  CDN_flop \R_B_reg[14] (.clk (CLK), .d (in_R_B[14]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[14]));
  CDN_flop \R_B_reg[15] (.clk (CLK), .d (in_R_B[15]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[15]));
  CDN_flop \R_B_reg[16] (.clk (CLK), .d (in_R_B[16]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[16]));
  CDN_flop \R_B_reg[17] (.clk (CLK), .d (in_R_B[17]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[17]));
  CDN_flop \R_B_reg[18] (.clk (CLK), .d (in_R_B[18]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[18]));
  CDN_flop \R_B_reg[19] (.clk (CLK), .d (in_R_B[19]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[19]));
  CDN_flop \R_B_reg[20] (.clk (CLK), .d (in_R_B[20]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[20]));
  CDN_flop \R_B_reg[21] (.clk (CLK), .d (in_R_B[21]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[21]));
  CDN_flop \R_B_reg[22] (.clk (CLK), .d (in_R_B[22]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[22]));
  CDN_flop \R_B_reg[23] (.clk (CLK), .d (in_R_B[23]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[23]));
  CDN_flop \R_B_reg[24] (.clk (CLK), .d (in_R_B[24]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[24]));
  CDN_flop \R_B_reg[25] (.clk (CLK), .d (in_R_B[25]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[25]));
  CDN_flop \R_B_reg[26] (.clk (CLK), .d (in_R_B[26]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[26]));
  CDN_flop \R_B_reg[27] (.clk (CLK), .d (in_R_B[27]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[27]));
  CDN_flop \R_B_reg[28] (.clk (CLK), .d (in_R_B[28]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[28]));
  CDN_flop \R_B_reg[29] (.clk (CLK), .d (in_R_B[29]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[29]));
  CDN_flop \R_B_reg[30] (.clk (CLK), .d (in_R_B[30]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[30]));
  CDN_flop \R_B_reg[31] (.clk (CLK), .d (in_R_B[31]), .sena (load_R_B),
       .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (R_B[31]));
  CDN_flop \R_res_reg[0] (.clk (CLK), .d (in_R_res[0]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[0]));
  CDN_flop \R_res_reg[1] (.clk (CLK), .d (in_R_res[1]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[1]));
  CDN_flop \R_res_reg[2] (.clk (CLK), .d (in_R_res[2]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[2]));
  CDN_flop \R_res_reg[3] (.clk (CLK), .d (in_R_res[3]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[3]));
  CDN_flop \R_res_reg[4] (.clk (CLK), .d (in_R_res[4]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[4]));
  CDN_flop \R_res_reg[5] (.clk (CLK), .d (in_R_res[5]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[5]));
  CDN_flop \R_res_reg[6] (.clk (CLK), .d (in_R_res[6]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[6]));
  CDN_flop \R_res_reg[7] (.clk (CLK), .d (in_R_res[7]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[7]));
  CDN_flop \R_res_reg[8] (.clk (CLK), .d (in_R_res[8]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[8]));
  CDN_flop \R_res_reg[9] (.clk (CLK), .d (in_R_res[9]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[9]));
  CDN_flop \R_res_reg[10] (.clk (CLK), .d (in_R_res[10]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[10]));
  CDN_flop \R_res_reg[11] (.clk (CLK), .d (in_R_res[11]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[11]));
  CDN_flop \R_res_reg[12] (.clk (CLK), .d (in_R_res[12]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[12]));
  CDN_flop \R_res_reg[13] (.clk (CLK), .d (in_R_res[13]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[13]));
  CDN_flop \R_res_reg[14] (.clk (CLK), .d (in_R_res[14]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[14]));
  CDN_flop \R_res_reg[15] (.clk (CLK), .d (in_R_res[15]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[15]));
  CDN_flop \R_res_reg[16] (.clk (CLK), .d (in_R_res[16]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[16]));
  CDN_flop \R_res_reg[17] (.clk (CLK), .d (in_R_res[17]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[17]));
  CDN_flop \R_res_reg[18] (.clk (CLK), .d (in_R_res[18]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[18]));
  CDN_flop \R_res_reg[19] (.clk (CLK), .d (in_R_res[19]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[19]));
  CDN_flop \R_res_reg[20] (.clk (CLK), .d (in_R_res[20]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[20]));
  CDN_flop \R_res_reg[21] (.clk (CLK), .d (in_R_res[21]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[21]));
  CDN_flop \R_res_reg[22] (.clk (CLK), .d (in_R_res[22]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[22]));
  CDN_flop \R_res_reg[23] (.clk (CLK), .d (in_R_res[23]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[23]));
  CDN_flop \R_res_reg[24] (.clk (CLK), .d (in_R_res[24]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[24]));
  CDN_flop \R_res_reg[25] (.clk (CLK), .d (in_R_res[25]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[25]));
  CDN_flop \R_res_reg[26] (.clk (CLK), .d (in_R_res[26]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[26]));
  CDN_flop \R_res_reg[27] (.clk (CLK), .d (in_R_res[27]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[27]));
  CDN_flop \R_res_reg[28] (.clk (CLK), .d (in_R_res[28]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[28]));
  CDN_flop \R_res_reg[29] (.clk (CLK), .d (in_R_res[29]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[29]));
  CDN_flop \R_res_reg[30] (.clk (CLK), .d (in_R_res[30]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[30]));
  CDN_flop \R_res_reg[31] (.clk (CLK), .d (in_R_res[31]), .sena
       (load_R_res), .aclr (n_142), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (res[31]));
  not g109 (n_142, rst_n);
  not g110 (n_216, adder1_out[32]);
endmodule

module mcd_OPSIZE32(CLK, rst_n, abort, operand1, operand2, res, start,
     ready);
  input CLK, rst_n, abort, start;
  input [31:0] operand1, operand2;
  output [31:0] res;
  output ready;
  wire CLK, rst_n, abort, start;
  wire [31:0] operand1, operand2;
  wire [31:0] res;
  wire ready;
  wire [1:0] sel_R_B;
  wire A_majeq_B, div1_abort, div1_ready, div1_start, load_R_A,
       load_R_B, load_R_res, sel_R_A;
  wire sel_R_res, z_A, z_B;
  mcd_ctrl CTRL(.CLK (CLK), .rst_n (rst_n), .abort (abort), .start
       (start), .ready (ready), .load_R_A (load_R_A), .sel_R_A
       (sel_R_A), .load_R_B (load_R_B), .sel_R_B (sel_R_B), .load_R_res
       (load_R_res), .sel_R_res (sel_R_res), .div1_abort (div1_abort),
       .div1_start (div1_start), .A_majeq_B (A_majeq_B), .z_A (z_A),
       .z_B (z_B), .div1_ready (div1_ready));
  mcd_dp_OPSIZE32 DP(.CLK (CLK), .rst_n (rst_n), .operand1 (operand1),
       .operand2 (operand2), .res (res), .load_R_A (load_R_A), .sel_R_A
       (sel_R_A), .load_R_B (load_R_B), .sel_R_B (sel_R_B), .load_R_res
       (load_R_res), .sel_R_res (sel_R_res), .div1_abort (div1_abort),
       .div1_start (div1_start), .A_majeq_B (A_majeq_B), .z_A (z_A),
       .z_B (z_B), .div1_ready (div1_ready));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux4(sel0, data0, data1, sel1, data2, data3, z);
  input sel0, data0, data1, sel1, data2, data3;
  output z;
  wire sel0, data0, data1, sel1, data2, data3;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1 or data2 or data3) 
      case ({sel0, sel1})
       2'b00: z = data0;
       2'b10: z = data1;
       2'b01: z = data2;
       2'b11: z = data3;
      endcase
endmodule
`else
module CDN_bmux4(sel0, data0, data1, sel1, data2, data3, z);
  input sel0, data0, data1, sel1, data2, data3;
  output z;
  wire sel0, data0, data1, sel1, data2, data3;
  wire z;
  wire inv_sel0, inv_sel1, w_0, w_1, w_2, w_3;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  and a_0 (w_0, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel1, sel0, data1);
  and a_2 (w_2, sel1, inv_sel0, data2);
  and a_3 (w_3, sel1, sel0, data3);
  or org (z, w_0, w_1, w_2, w_3);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux3(sel0, data0, data1, sel1, data2, z);
  input sel0, data0, data1, sel1, data2;
  output z;
  wire sel0, data0, data1, sel1, data2;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1 or data2) 
      case ({sel0, sel1})
       2'b00: z = data0;
       2'b10: z = data1;
       2'b01: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_bmux3(sel0, data0, data1, sel1, data2, z);
  input sel0, data0, data1, sel1, data2;
  output z;
  wire sel0, data0, data1, sel1, data2;
  wire z;
  wire inv_sel0, inv_sel1, w_0, w_1, w_2;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  and a_0 (w_0, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel1, sel0, data1);
  and a_2 (w_2, sel1, inv_sel0, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
